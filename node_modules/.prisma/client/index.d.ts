
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Family
 * 
 */
export type Family = $Result.DefaultSelection<Prisma.$FamilyPayload>
/**
 * Model ShoppingList
 * 
 */
export type ShoppingList = $Result.DefaultSelection<Prisma.$ShoppingListPayload>
/**
 * Model ShoppingItem
 * 
 */
export type ShoppingItem = $Result.DefaultSelection<Prisma.$ShoppingItemPayload>
/**
 * Model ShoppingCategory
 * 
 */
export type ShoppingCategory = $Result.DefaultSelection<Prisma.$ShoppingCategoryPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ShoppingListStatus: {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  ARCHIVED: 'ARCHIVED'
};

export type ShoppingListStatus = (typeof ShoppingListStatus)[keyof typeof ShoppingListStatus]


export const ShoppingItemStatus: {
  PENDING: 'PENDING',
  PURCHASED: 'PURCHASED',
  OUT_OF_STOCK: 'OUT_OF_STOCK',
  CANCELLED: 'CANCELLED'
};

export type ShoppingItemStatus = (typeof ShoppingItemStatus)[keyof typeof ShoppingItemStatus]

}

export type ShoppingListStatus = $Enums.ShoppingListStatus

export const ShoppingListStatus: typeof $Enums.ShoppingListStatus

export type ShoppingItemStatus = $Enums.ShoppingItemStatus

export const ShoppingItemStatus: typeof $Enums.ShoppingItemStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.family`: Exposes CRUD operations for the **Family** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Families
    * const families = await prisma.family.findMany()
    * ```
    */
  get family(): Prisma.FamilyDelegate<ExtArgs>;

  /**
   * `prisma.shoppingList`: Exposes CRUD operations for the **ShoppingList** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShoppingLists
    * const shoppingLists = await prisma.shoppingList.findMany()
    * ```
    */
  get shoppingList(): Prisma.ShoppingListDelegate<ExtArgs>;

  /**
   * `prisma.shoppingItem`: Exposes CRUD operations for the **ShoppingItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShoppingItems
    * const shoppingItems = await prisma.shoppingItem.findMany()
    * ```
    */
  get shoppingItem(): Prisma.ShoppingItemDelegate<ExtArgs>;

  /**
   * `prisma.shoppingCategory`: Exposes CRUD operations for the **ShoppingCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShoppingCategories
    * const shoppingCategories = await prisma.shoppingCategory.findMany()
    * ```
    */
  get shoppingCategory(): Prisma.ShoppingCategoryDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Family: 'Family',
    ShoppingList: 'ShoppingList',
    ShoppingItem: 'ShoppingItem',
    ShoppingCategory: 'ShoppingCategory'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "family" | "shoppingList" | "shoppingItem" | "shoppingCategory"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Family: {
        payload: Prisma.$FamilyPayload<ExtArgs>
        fields: Prisma.FamilyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FamilyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FamilyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyPayload>
          }
          findFirst: {
            args: Prisma.FamilyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FamilyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyPayload>
          }
          findMany: {
            args: Prisma.FamilyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyPayload>[]
          }
          create: {
            args: Prisma.FamilyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyPayload>
          }
          createMany: {
            args: Prisma.FamilyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FamilyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyPayload>[]
          }
          delete: {
            args: Prisma.FamilyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyPayload>
          }
          update: {
            args: Prisma.FamilyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyPayload>
          }
          deleteMany: {
            args: Prisma.FamilyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FamilyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FamilyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyPayload>
          }
          aggregate: {
            args: Prisma.FamilyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFamily>
          }
          groupBy: {
            args: Prisma.FamilyGroupByArgs<ExtArgs>
            result: $Utils.Optional<FamilyGroupByOutputType>[]
          }
          count: {
            args: Prisma.FamilyCountArgs<ExtArgs>
            result: $Utils.Optional<FamilyCountAggregateOutputType> | number
          }
        }
      }
      ShoppingList: {
        payload: Prisma.$ShoppingListPayload<ExtArgs>
        fields: Prisma.ShoppingListFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShoppingListFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShoppingListFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>
          }
          findFirst: {
            args: Prisma.ShoppingListFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShoppingListFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>
          }
          findMany: {
            args: Prisma.ShoppingListFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>[]
          }
          create: {
            args: Prisma.ShoppingListCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>
          }
          createMany: {
            args: Prisma.ShoppingListCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShoppingListCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>[]
          }
          delete: {
            args: Prisma.ShoppingListDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>
          }
          update: {
            args: Prisma.ShoppingListUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>
          }
          deleteMany: {
            args: Prisma.ShoppingListDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShoppingListUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ShoppingListUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingListPayload>
          }
          aggregate: {
            args: Prisma.ShoppingListAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShoppingList>
          }
          groupBy: {
            args: Prisma.ShoppingListGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShoppingListGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShoppingListCountArgs<ExtArgs>
            result: $Utils.Optional<ShoppingListCountAggregateOutputType> | number
          }
        }
      }
      ShoppingItem: {
        payload: Prisma.$ShoppingItemPayload<ExtArgs>
        fields: Prisma.ShoppingItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShoppingItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShoppingItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>
          }
          findFirst: {
            args: Prisma.ShoppingItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShoppingItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>
          }
          findMany: {
            args: Prisma.ShoppingItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>[]
          }
          create: {
            args: Prisma.ShoppingItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>
          }
          createMany: {
            args: Prisma.ShoppingItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShoppingItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>[]
          }
          delete: {
            args: Prisma.ShoppingItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>
          }
          update: {
            args: Prisma.ShoppingItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>
          }
          deleteMany: {
            args: Prisma.ShoppingItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShoppingItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ShoppingItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>
          }
          aggregate: {
            args: Prisma.ShoppingItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShoppingItem>
          }
          groupBy: {
            args: Prisma.ShoppingItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShoppingItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShoppingItemCountArgs<ExtArgs>
            result: $Utils.Optional<ShoppingItemCountAggregateOutputType> | number
          }
        }
      }
      ShoppingCategory: {
        payload: Prisma.$ShoppingCategoryPayload<ExtArgs>
        fields: Prisma.ShoppingCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShoppingCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShoppingCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingCategoryPayload>
          }
          findFirst: {
            args: Prisma.ShoppingCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShoppingCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingCategoryPayload>
          }
          findMany: {
            args: Prisma.ShoppingCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingCategoryPayload>[]
          }
          create: {
            args: Prisma.ShoppingCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingCategoryPayload>
          }
          createMany: {
            args: Prisma.ShoppingCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShoppingCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingCategoryPayload>[]
          }
          delete: {
            args: Prisma.ShoppingCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingCategoryPayload>
          }
          update: {
            args: Prisma.ShoppingCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingCategoryPayload>
          }
          deleteMany: {
            args: Prisma.ShoppingCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShoppingCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ShoppingCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingCategoryPayload>
          }
          aggregate: {
            args: Prisma.ShoppingCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShoppingCategory>
          }
          groupBy: {
            args: Prisma.ShoppingCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShoppingCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShoppingCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<ShoppingCategoryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    shoppingLists: number
    shoppingItems: number
    shoppingCategories: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shoppingLists?: boolean | UserCountOutputTypeCountShoppingListsArgs
    shoppingItems?: boolean | UserCountOutputTypeCountShoppingItemsArgs
    shoppingCategories?: boolean | UserCountOutputTypeCountShoppingCategoriesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountShoppingListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShoppingListWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountShoppingItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShoppingItemWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountShoppingCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShoppingCategoryWhereInput
  }


  /**
   * Count Type FamilyCountOutputType
   */

  export type FamilyCountOutputType = {
    shoppingLists: number
    shoppingCategories: number
  }

  export type FamilyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shoppingLists?: boolean | FamilyCountOutputTypeCountShoppingListsArgs
    shoppingCategories?: boolean | FamilyCountOutputTypeCountShoppingCategoriesArgs
  }

  // Custom InputTypes
  /**
   * FamilyCountOutputType without action
   */
  export type FamilyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyCountOutputType
     */
    select?: FamilyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FamilyCountOutputType without action
   */
  export type FamilyCountOutputTypeCountShoppingListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShoppingListWhereInput
  }

  /**
   * FamilyCountOutputType without action
   */
  export type FamilyCountOutputTypeCountShoppingCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShoppingCategoryWhereInput
  }


  /**
   * Count Type ShoppingListCountOutputType
   */

  export type ShoppingListCountOutputType = {
    items: number
  }

  export type ShoppingListCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | ShoppingListCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * ShoppingListCountOutputType without action
   */
  export type ShoppingListCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingListCountOutputType
     */
    select?: ShoppingListCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ShoppingListCountOutputType without action
   */
  export type ShoppingListCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShoppingItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    familyId: string | null
    name: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    familyId: string | null
    name: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    familyId: number
    name: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    familyId?: true
    name?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    familyId?: true
    name?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    familyId?: true
    name?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    familyId: string
    name: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    familyId?: boolean
    name?: boolean
    shoppingLists?: boolean | User$shoppingListsArgs<ExtArgs>
    shoppingItems?: boolean | User$shoppingItemsArgs<ExtArgs>
    shoppingCategories?: boolean | User$shoppingCategoriesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    familyId?: boolean
    name?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    familyId?: boolean
    name?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shoppingLists?: boolean | User$shoppingListsArgs<ExtArgs>
    shoppingItems?: boolean | User$shoppingItemsArgs<ExtArgs>
    shoppingCategories?: boolean | User$shoppingCategoriesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      shoppingLists: Prisma.$ShoppingListPayload<ExtArgs>[]
      shoppingItems: Prisma.$ShoppingItemPayload<ExtArgs>[]
      shoppingCategories: Prisma.$ShoppingCategoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      familyId: string
      name: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    shoppingLists<T extends User$shoppingListsArgs<ExtArgs> = {}>(args?: Subset<T, User$shoppingListsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "findMany"> | Null>
    shoppingItems<T extends User$shoppingItemsArgs<ExtArgs> = {}>(args?: Subset<T, User$shoppingItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "findMany"> | Null>
    shoppingCategories<T extends User$shoppingCategoriesArgs<ExtArgs> = {}>(args?: Subset<T, User$shoppingCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingCategoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly familyId: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.shoppingLists
   */
  export type User$shoppingListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    where?: ShoppingListWhereInput
    orderBy?: ShoppingListOrderByWithRelationInput | ShoppingListOrderByWithRelationInput[]
    cursor?: ShoppingListWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShoppingListScalarFieldEnum | ShoppingListScalarFieldEnum[]
  }

  /**
   * User.shoppingItems
   */
  export type User$shoppingItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    where?: ShoppingItemWhereInput
    orderBy?: ShoppingItemOrderByWithRelationInput | ShoppingItemOrderByWithRelationInput[]
    cursor?: ShoppingItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShoppingItemScalarFieldEnum | ShoppingItemScalarFieldEnum[]
  }

  /**
   * User.shoppingCategories
   */
  export type User$shoppingCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingCategory
     */
    select?: ShoppingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingCategoryInclude<ExtArgs> | null
    where?: ShoppingCategoryWhereInput
    orderBy?: ShoppingCategoryOrderByWithRelationInput | ShoppingCategoryOrderByWithRelationInput[]
    cursor?: ShoppingCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShoppingCategoryScalarFieldEnum | ShoppingCategoryScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Family
   */

  export type AggregateFamily = {
    _count: FamilyCountAggregateOutputType | null
    _min: FamilyMinAggregateOutputType | null
    _max: FamilyMaxAggregateOutputType | null
  }

  export type FamilyMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type FamilyMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type FamilyCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type FamilyMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type FamilyMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type FamilyCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type FamilyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Family to aggregate.
     */
    where?: FamilyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Families to fetch.
     */
    orderBy?: FamilyOrderByWithRelationInput | FamilyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FamilyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Families from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Families.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Families
    **/
    _count?: true | FamilyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FamilyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FamilyMaxAggregateInputType
  }

  export type GetFamilyAggregateType<T extends FamilyAggregateArgs> = {
        [P in keyof T & keyof AggregateFamily]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFamily[P]>
      : GetScalarType<T[P], AggregateFamily[P]>
  }




  export type FamilyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FamilyWhereInput
    orderBy?: FamilyOrderByWithAggregationInput | FamilyOrderByWithAggregationInput[]
    by: FamilyScalarFieldEnum[] | FamilyScalarFieldEnum
    having?: FamilyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FamilyCountAggregateInputType | true
    _min?: FamilyMinAggregateInputType
    _max?: FamilyMaxAggregateInputType
  }

  export type FamilyGroupByOutputType = {
    id: string
    name: string
    _count: FamilyCountAggregateOutputType | null
    _min: FamilyMinAggregateOutputType | null
    _max: FamilyMaxAggregateOutputType | null
  }

  type GetFamilyGroupByPayload<T extends FamilyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FamilyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FamilyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FamilyGroupByOutputType[P]>
            : GetScalarType<T[P], FamilyGroupByOutputType[P]>
        }
      >
    >


  export type FamilySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    shoppingLists?: boolean | Family$shoppingListsArgs<ExtArgs>
    shoppingCategories?: boolean | Family$shoppingCategoriesArgs<ExtArgs>
    _count?: boolean | FamilyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["family"]>

  export type FamilySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["family"]>

  export type FamilySelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type FamilyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shoppingLists?: boolean | Family$shoppingListsArgs<ExtArgs>
    shoppingCategories?: boolean | Family$shoppingCategoriesArgs<ExtArgs>
    _count?: boolean | FamilyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FamilyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FamilyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Family"
    objects: {
      shoppingLists: Prisma.$ShoppingListPayload<ExtArgs>[]
      shoppingCategories: Prisma.$ShoppingCategoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["family"]>
    composites: {}
  }

  type FamilyGetPayload<S extends boolean | null | undefined | FamilyDefaultArgs> = $Result.GetResult<Prisma.$FamilyPayload, S>

  type FamilyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FamilyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FamilyCountAggregateInputType | true
    }

  export interface FamilyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Family'], meta: { name: 'Family' } }
    /**
     * Find zero or one Family that matches the filter.
     * @param {FamilyFindUniqueArgs} args - Arguments to find a Family
     * @example
     * // Get one Family
     * const family = await prisma.family.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FamilyFindUniqueArgs>(args: SelectSubset<T, FamilyFindUniqueArgs<ExtArgs>>): Prisma__FamilyClient<$Result.GetResult<Prisma.$FamilyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Family that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FamilyFindUniqueOrThrowArgs} args - Arguments to find a Family
     * @example
     * // Get one Family
     * const family = await prisma.family.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FamilyFindUniqueOrThrowArgs>(args: SelectSubset<T, FamilyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FamilyClient<$Result.GetResult<Prisma.$FamilyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Family that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyFindFirstArgs} args - Arguments to find a Family
     * @example
     * // Get one Family
     * const family = await prisma.family.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FamilyFindFirstArgs>(args?: SelectSubset<T, FamilyFindFirstArgs<ExtArgs>>): Prisma__FamilyClient<$Result.GetResult<Prisma.$FamilyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Family that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyFindFirstOrThrowArgs} args - Arguments to find a Family
     * @example
     * // Get one Family
     * const family = await prisma.family.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FamilyFindFirstOrThrowArgs>(args?: SelectSubset<T, FamilyFindFirstOrThrowArgs<ExtArgs>>): Prisma__FamilyClient<$Result.GetResult<Prisma.$FamilyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Families that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Families
     * const families = await prisma.family.findMany()
     * 
     * // Get first 10 Families
     * const families = await prisma.family.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const familyWithIdOnly = await prisma.family.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FamilyFindManyArgs>(args?: SelectSubset<T, FamilyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FamilyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Family.
     * @param {FamilyCreateArgs} args - Arguments to create a Family.
     * @example
     * // Create one Family
     * const Family = await prisma.family.create({
     *   data: {
     *     // ... data to create a Family
     *   }
     * })
     * 
     */
    create<T extends FamilyCreateArgs>(args: SelectSubset<T, FamilyCreateArgs<ExtArgs>>): Prisma__FamilyClient<$Result.GetResult<Prisma.$FamilyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Families.
     * @param {FamilyCreateManyArgs} args - Arguments to create many Families.
     * @example
     * // Create many Families
     * const family = await prisma.family.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FamilyCreateManyArgs>(args?: SelectSubset<T, FamilyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Families and returns the data saved in the database.
     * @param {FamilyCreateManyAndReturnArgs} args - Arguments to create many Families.
     * @example
     * // Create many Families
     * const family = await prisma.family.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Families and only return the `id`
     * const familyWithIdOnly = await prisma.family.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FamilyCreateManyAndReturnArgs>(args?: SelectSubset<T, FamilyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FamilyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Family.
     * @param {FamilyDeleteArgs} args - Arguments to delete one Family.
     * @example
     * // Delete one Family
     * const Family = await prisma.family.delete({
     *   where: {
     *     // ... filter to delete one Family
     *   }
     * })
     * 
     */
    delete<T extends FamilyDeleteArgs>(args: SelectSubset<T, FamilyDeleteArgs<ExtArgs>>): Prisma__FamilyClient<$Result.GetResult<Prisma.$FamilyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Family.
     * @param {FamilyUpdateArgs} args - Arguments to update one Family.
     * @example
     * // Update one Family
     * const family = await prisma.family.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FamilyUpdateArgs>(args: SelectSubset<T, FamilyUpdateArgs<ExtArgs>>): Prisma__FamilyClient<$Result.GetResult<Prisma.$FamilyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Families.
     * @param {FamilyDeleteManyArgs} args - Arguments to filter Families to delete.
     * @example
     * // Delete a few Families
     * const { count } = await prisma.family.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FamilyDeleteManyArgs>(args?: SelectSubset<T, FamilyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Families.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Families
     * const family = await prisma.family.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FamilyUpdateManyArgs>(args: SelectSubset<T, FamilyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Family.
     * @param {FamilyUpsertArgs} args - Arguments to update or create a Family.
     * @example
     * // Update or create a Family
     * const family = await prisma.family.upsert({
     *   create: {
     *     // ... data to create a Family
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Family we want to update
     *   }
     * })
     */
    upsert<T extends FamilyUpsertArgs>(args: SelectSubset<T, FamilyUpsertArgs<ExtArgs>>): Prisma__FamilyClient<$Result.GetResult<Prisma.$FamilyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Families.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyCountArgs} args - Arguments to filter Families to count.
     * @example
     * // Count the number of Families
     * const count = await prisma.family.count({
     *   where: {
     *     // ... the filter for the Families we want to count
     *   }
     * })
    **/
    count<T extends FamilyCountArgs>(
      args?: Subset<T, FamilyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FamilyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Family.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FamilyAggregateArgs>(args: Subset<T, FamilyAggregateArgs>): Prisma.PrismaPromise<GetFamilyAggregateType<T>>

    /**
     * Group by Family.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FamilyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FamilyGroupByArgs['orderBy'] }
        : { orderBy?: FamilyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FamilyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFamilyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Family model
   */
  readonly fields: FamilyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Family.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FamilyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    shoppingLists<T extends Family$shoppingListsArgs<ExtArgs> = {}>(args?: Subset<T, Family$shoppingListsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "findMany"> | Null>
    shoppingCategories<T extends Family$shoppingCategoriesArgs<ExtArgs> = {}>(args?: Subset<T, Family$shoppingCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingCategoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Family model
   */ 
  interface FamilyFieldRefs {
    readonly id: FieldRef<"Family", 'String'>
    readonly name: FieldRef<"Family", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Family findUnique
   */
  export type FamilyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Family
     */
    select?: FamilySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyInclude<ExtArgs> | null
    /**
     * Filter, which Family to fetch.
     */
    where: FamilyWhereUniqueInput
  }

  /**
   * Family findUniqueOrThrow
   */
  export type FamilyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Family
     */
    select?: FamilySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyInclude<ExtArgs> | null
    /**
     * Filter, which Family to fetch.
     */
    where: FamilyWhereUniqueInput
  }

  /**
   * Family findFirst
   */
  export type FamilyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Family
     */
    select?: FamilySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyInclude<ExtArgs> | null
    /**
     * Filter, which Family to fetch.
     */
    where?: FamilyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Families to fetch.
     */
    orderBy?: FamilyOrderByWithRelationInput | FamilyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Families.
     */
    cursor?: FamilyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Families from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Families.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Families.
     */
    distinct?: FamilyScalarFieldEnum | FamilyScalarFieldEnum[]
  }

  /**
   * Family findFirstOrThrow
   */
  export type FamilyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Family
     */
    select?: FamilySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyInclude<ExtArgs> | null
    /**
     * Filter, which Family to fetch.
     */
    where?: FamilyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Families to fetch.
     */
    orderBy?: FamilyOrderByWithRelationInput | FamilyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Families.
     */
    cursor?: FamilyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Families from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Families.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Families.
     */
    distinct?: FamilyScalarFieldEnum | FamilyScalarFieldEnum[]
  }

  /**
   * Family findMany
   */
  export type FamilyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Family
     */
    select?: FamilySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyInclude<ExtArgs> | null
    /**
     * Filter, which Families to fetch.
     */
    where?: FamilyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Families to fetch.
     */
    orderBy?: FamilyOrderByWithRelationInput | FamilyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Families.
     */
    cursor?: FamilyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Families from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Families.
     */
    skip?: number
    distinct?: FamilyScalarFieldEnum | FamilyScalarFieldEnum[]
  }

  /**
   * Family create
   */
  export type FamilyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Family
     */
    select?: FamilySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyInclude<ExtArgs> | null
    /**
     * The data needed to create a Family.
     */
    data: XOR<FamilyCreateInput, FamilyUncheckedCreateInput>
  }

  /**
   * Family createMany
   */
  export type FamilyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Families.
     */
    data: FamilyCreateManyInput | FamilyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Family createManyAndReturn
   */
  export type FamilyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Family
     */
    select?: FamilySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Families.
     */
    data: FamilyCreateManyInput | FamilyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Family update
   */
  export type FamilyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Family
     */
    select?: FamilySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyInclude<ExtArgs> | null
    /**
     * The data needed to update a Family.
     */
    data: XOR<FamilyUpdateInput, FamilyUncheckedUpdateInput>
    /**
     * Choose, which Family to update.
     */
    where: FamilyWhereUniqueInput
  }

  /**
   * Family updateMany
   */
  export type FamilyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Families.
     */
    data: XOR<FamilyUpdateManyMutationInput, FamilyUncheckedUpdateManyInput>
    /**
     * Filter which Families to update
     */
    where?: FamilyWhereInput
  }

  /**
   * Family upsert
   */
  export type FamilyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Family
     */
    select?: FamilySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyInclude<ExtArgs> | null
    /**
     * The filter to search for the Family to update in case it exists.
     */
    where: FamilyWhereUniqueInput
    /**
     * In case the Family found by the `where` argument doesn't exist, create a new Family with this data.
     */
    create: XOR<FamilyCreateInput, FamilyUncheckedCreateInput>
    /**
     * In case the Family was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FamilyUpdateInput, FamilyUncheckedUpdateInput>
  }

  /**
   * Family delete
   */
  export type FamilyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Family
     */
    select?: FamilySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyInclude<ExtArgs> | null
    /**
     * Filter which Family to delete.
     */
    where: FamilyWhereUniqueInput
  }

  /**
   * Family deleteMany
   */
  export type FamilyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Families to delete
     */
    where?: FamilyWhereInput
  }

  /**
   * Family.shoppingLists
   */
  export type Family$shoppingListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    where?: ShoppingListWhereInput
    orderBy?: ShoppingListOrderByWithRelationInput | ShoppingListOrderByWithRelationInput[]
    cursor?: ShoppingListWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShoppingListScalarFieldEnum | ShoppingListScalarFieldEnum[]
  }

  /**
   * Family.shoppingCategories
   */
  export type Family$shoppingCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingCategory
     */
    select?: ShoppingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingCategoryInclude<ExtArgs> | null
    where?: ShoppingCategoryWhereInput
    orderBy?: ShoppingCategoryOrderByWithRelationInput | ShoppingCategoryOrderByWithRelationInput[]
    cursor?: ShoppingCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShoppingCategoryScalarFieldEnum | ShoppingCategoryScalarFieldEnum[]
  }

  /**
   * Family without action
   */
  export type FamilyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Family
     */
    select?: FamilySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyInclude<ExtArgs> | null
  }


  /**
   * Model ShoppingList
   */

  export type AggregateShoppingList = {
    _count: ShoppingListCountAggregateOutputType | null
    _avg: ShoppingListAvgAggregateOutputType | null
    _sum: ShoppingListSumAggregateOutputType | null
    _min: ShoppingListMinAggregateOutputType | null
    _max: ShoppingListMaxAggregateOutputType | null
  }

  export type ShoppingListAvgAggregateOutputType = {
    totalEstimatedCost: Decimal | null
  }

  export type ShoppingListSumAggregateOutputType = {
    totalEstimatedCost: Decimal | null
  }

  export type ShoppingListMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: $Enums.ShoppingListStatus | null
    userId: string | null
    familyId: string | null
    totalEstimatedCost: Decimal | null
    dueDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShoppingListMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: $Enums.ShoppingListStatus | null
    userId: string | null
    familyId: string | null
    totalEstimatedCost: Decimal | null
    dueDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShoppingListCountAggregateOutputType = {
    id: number
    title: number
    description: number
    status: number
    userId: number
    familyId: number
    totalEstimatedCost: number
    dueDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ShoppingListAvgAggregateInputType = {
    totalEstimatedCost?: true
  }

  export type ShoppingListSumAggregateInputType = {
    totalEstimatedCost?: true
  }

  export type ShoppingListMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    userId?: true
    familyId?: true
    totalEstimatedCost?: true
    dueDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShoppingListMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    userId?: true
    familyId?: true
    totalEstimatedCost?: true
    dueDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShoppingListCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    userId?: true
    familyId?: true
    totalEstimatedCost?: true
    dueDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ShoppingListAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShoppingList to aggregate.
     */
    where?: ShoppingListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingLists to fetch.
     */
    orderBy?: ShoppingListOrderByWithRelationInput | ShoppingListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShoppingListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShoppingLists
    **/
    _count?: true | ShoppingListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShoppingListAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShoppingListSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShoppingListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShoppingListMaxAggregateInputType
  }

  export type GetShoppingListAggregateType<T extends ShoppingListAggregateArgs> = {
        [P in keyof T & keyof AggregateShoppingList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShoppingList[P]>
      : GetScalarType<T[P], AggregateShoppingList[P]>
  }




  export type ShoppingListGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShoppingListWhereInput
    orderBy?: ShoppingListOrderByWithAggregationInput | ShoppingListOrderByWithAggregationInput[]
    by: ShoppingListScalarFieldEnum[] | ShoppingListScalarFieldEnum
    having?: ShoppingListScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShoppingListCountAggregateInputType | true
    _avg?: ShoppingListAvgAggregateInputType
    _sum?: ShoppingListSumAggregateInputType
    _min?: ShoppingListMinAggregateInputType
    _max?: ShoppingListMaxAggregateInputType
  }

  export type ShoppingListGroupByOutputType = {
    id: string
    title: string
    description: string | null
    status: $Enums.ShoppingListStatus
    userId: string
    familyId: string
    totalEstimatedCost: Decimal | null
    dueDate: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ShoppingListCountAggregateOutputType | null
    _avg: ShoppingListAvgAggregateOutputType | null
    _sum: ShoppingListSumAggregateOutputType | null
    _min: ShoppingListMinAggregateOutputType | null
    _max: ShoppingListMaxAggregateOutputType | null
  }

  type GetShoppingListGroupByPayload<T extends ShoppingListGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShoppingListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShoppingListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShoppingListGroupByOutputType[P]>
            : GetScalarType<T[P], ShoppingListGroupByOutputType[P]>
        }
      >
    >


  export type ShoppingListSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    userId?: boolean
    familyId?: boolean
    totalEstimatedCost?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    family?: boolean | FamilyDefaultArgs<ExtArgs>
    items?: boolean | ShoppingList$itemsArgs<ExtArgs>
    _count?: boolean | ShoppingListCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shoppingList"]>

  export type ShoppingListSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    userId?: boolean
    familyId?: boolean
    totalEstimatedCost?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    family?: boolean | FamilyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shoppingList"]>

  export type ShoppingListSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    userId?: boolean
    familyId?: boolean
    totalEstimatedCost?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ShoppingListInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    family?: boolean | FamilyDefaultArgs<ExtArgs>
    items?: boolean | ShoppingList$itemsArgs<ExtArgs>
    _count?: boolean | ShoppingListCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ShoppingListIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    family?: boolean | FamilyDefaultArgs<ExtArgs>
  }

  export type $ShoppingListPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShoppingList"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      family: Prisma.$FamilyPayload<ExtArgs>
      items: Prisma.$ShoppingItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      status: $Enums.ShoppingListStatus
      userId: string
      familyId: string
      totalEstimatedCost: Prisma.Decimal | null
      dueDate: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["shoppingList"]>
    composites: {}
  }

  type ShoppingListGetPayload<S extends boolean | null | undefined | ShoppingListDefaultArgs> = $Result.GetResult<Prisma.$ShoppingListPayload, S>

  type ShoppingListCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ShoppingListFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShoppingListCountAggregateInputType | true
    }

  export interface ShoppingListDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShoppingList'], meta: { name: 'ShoppingList' } }
    /**
     * Find zero or one ShoppingList that matches the filter.
     * @param {ShoppingListFindUniqueArgs} args - Arguments to find a ShoppingList
     * @example
     * // Get one ShoppingList
     * const shoppingList = await prisma.shoppingList.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShoppingListFindUniqueArgs>(args: SelectSubset<T, ShoppingListFindUniqueArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ShoppingList that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ShoppingListFindUniqueOrThrowArgs} args - Arguments to find a ShoppingList
     * @example
     * // Get one ShoppingList
     * const shoppingList = await prisma.shoppingList.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShoppingListFindUniqueOrThrowArgs>(args: SelectSubset<T, ShoppingListFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ShoppingList that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListFindFirstArgs} args - Arguments to find a ShoppingList
     * @example
     * // Get one ShoppingList
     * const shoppingList = await prisma.shoppingList.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShoppingListFindFirstArgs>(args?: SelectSubset<T, ShoppingListFindFirstArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ShoppingList that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListFindFirstOrThrowArgs} args - Arguments to find a ShoppingList
     * @example
     * // Get one ShoppingList
     * const shoppingList = await prisma.shoppingList.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShoppingListFindFirstOrThrowArgs>(args?: SelectSubset<T, ShoppingListFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ShoppingLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShoppingLists
     * const shoppingLists = await prisma.shoppingList.findMany()
     * 
     * // Get first 10 ShoppingLists
     * const shoppingLists = await prisma.shoppingList.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shoppingListWithIdOnly = await prisma.shoppingList.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShoppingListFindManyArgs>(args?: SelectSubset<T, ShoppingListFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ShoppingList.
     * @param {ShoppingListCreateArgs} args - Arguments to create a ShoppingList.
     * @example
     * // Create one ShoppingList
     * const ShoppingList = await prisma.shoppingList.create({
     *   data: {
     *     // ... data to create a ShoppingList
     *   }
     * })
     * 
     */
    create<T extends ShoppingListCreateArgs>(args: SelectSubset<T, ShoppingListCreateArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ShoppingLists.
     * @param {ShoppingListCreateManyArgs} args - Arguments to create many ShoppingLists.
     * @example
     * // Create many ShoppingLists
     * const shoppingList = await prisma.shoppingList.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShoppingListCreateManyArgs>(args?: SelectSubset<T, ShoppingListCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShoppingLists and returns the data saved in the database.
     * @param {ShoppingListCreateManyAndReturnArgs} args - Arguments to create many ShoppingLists.
     * @example
     * // Create many ShoppingLists
     * const shoppingList = await prisma.shoppingList.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShoppingLists and only return the `id`
     * const shoppingListWithIdOnly = await prisma.shoppingList.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShoppingListCreateManyAndReturnArgs>(args?: SelectSubset<T, ShoppingListCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ShoppingList.
     * @param {ShoppingListDeleteArgs} args - Arguments to delete one ShoppingList.
     * @example
     * // Delete one ShoppingList
     * const ShoppingList = await prisma.shoppingList.delete({
     *   where: {
     *     // ... filter to delete one ShoppingList
     *   }
     * })
     * 
     */
    delete<T extends ShoppingListDeleteArgs>(args: SelectSubset<T, ShoppingListDeleteArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ShoppingList.
     * @param {ShoppingListUpdateArgs} args - Arguments to update one ShoppingList.
     * @example
     * // Update one ShoppingList
     * const shoppingList = await prisma.shoppingList.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShoppingListUpdateArgs>(args: SelectSubset<T, ShoppingListUpdateArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ShoppingLists.
     * @param {ShoppingListDeleteManyArgs} args - Arguments to filter ShoppingLists to delete.
     * @example
     * // Delete a few ShoppingLists
     * const { count } = await prisma.shoppingList.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShoppingListDeleteManyArgs>(args?: SelectSubset<T, ShoppingListDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShoppingLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShoppingLists
     * const shoppingList = await prisma.shoppingList.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShoppingListUpdateManyArgs>(args: SelectSubset<T, ShoppingListUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ShoppingList.
     * @param {ShoppingListUpsertArgs} args - Arguments to update or create a ShoppingList.
     * @example
     * // Update or create a ShoppingList
     * const shoppingList = await prisma.shoppingList.upsert({
     *   create: {
     *     // ... data to create a ShoppingList
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShoppingList we want to update
     *   }
     * })
     */
    upsert<T extends ShoppingListUpsertArgs>(args: SelectSubset<T, ShoppingListUpsertArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ShoppingLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListCountArgs} args - Arguments to filter ShoppingLists to count.
     * @example
     * // Count the number of ShoppingLists
     * const count = await prisma.shoppingList.count({
     *   where: {
     *     // ... the filter for the ShoppingLists we want to count
     *   }
     * })
    **/
    count<T extends ShoppingListCountArgs>(
      args?: Subset<T, ShoppingListCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShoppingListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShoppingList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShoppingListAggregateArgs>(args: Subset<T, ShoppingListAggregateArgs>): Prisma.PrismaPromise<GetShoppingListAggregateType<T>>

    /**
     * Group by ShoppingList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShoppingListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShoppingListGroupByArgs['orderBy'] }
        : { orderBy?: ShoppingListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShoppingListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShoppingListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShoppingList model
   */
  readonly fields: ShoppingListFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShoppingList.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShoppingListClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    family<T extends FamilyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FamilyDefaultArgs<ExtArgs>>): Prisma__FamilyClient<$Result.GetResult<Prisma.$FamilyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    items<T extends ShoppingList$itemsArgs<ExtArgs> = {}>(args?: Subset<T, ShoppingList$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShoppingList model
   */ 
  interface ShoppingListFieldRefs {
    readonly id: FieldRef<"ShoppingList", 'String'>
    readonly title: FieldRef<"ShoppingList", 'String'>
    readonly description: FieldRef<"ShoppingList", 'String'>
    readonly status: FieldRef<"ShoppingList", 'ShoppingListStatus'>
    readonly userId: FieldRef<"ShoppingList", 'String'>
    readonly familyId: FieldRef<"ShoppingList", 'String'>
    readonly totalEstimatedCost: FieldRef<"ShoppingList", 'Decimal'>
    readonly dueDate: FieldRef<"ShoppingList", 'DateTime'>
    readonly createdAt: FieldRef<"ShoppingList", 'DateTime'>
    readonly updatedAt: FieldRef<"ShoppingList", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ShoppingList findUnique
   */
  export type ShoppingListFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingList to fetch.
     */
    where: ShoppingListWhereUniqueInput
  }

  /**
   * ShoppingList findUniqueOrThrow
   */
  export type ShoppingListFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingList to fetch.
     */
    where: ShoppingListWhereUniqueInput
  }

  /**
   * ShoppingList findFirst
   */
  export type ShoppingListFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingList to fetch.
     */
    where?: ShoppingListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingLists to fetch.
     */
    orderBy?: ShoppingListOrderByWithRelationInput | ShoppingListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShoppingLists.
     */
    cursor?: ShoppingListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShoppingLists.
     */
    distinct?: ShoppingListScalarFieldEnum | ShoppingListScalarFieldEnum[]
  }

  /**
   * ShoppingList findFirstOrThrow
   */
  export type ShoppingListFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingList to fetch.
     */
    where?: ShoppingListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingLists to fetch.
     */
    orderBy?: ShoppingListOrderByWithRelationInput | ShoppingListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShoppingLists.
     */
    cursor?: ShoppingListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShoppingLists.
     */
    distinct?: ShoppingListScalarFieldEnum | ShoppingListScalarFieldEnum[]
  }

  /**
   * ShoppingList findMany
   */
  export type ShoppingListFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingLists to fetch.
     */
    where?: ShoppingListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingLists to fetch.
     */
    orderBy?: ShoppingListOrderByWithRelationInput | ShoppingListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShoppingLists.
     */
    cursor?: ShoppingListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingLists.
     */
    skip?: number
    distinct?: ShoppingListScalarFieldEnum | ShoppingListScalarFieldEnum[]
  }

  /**
   * ShoppingList create
   */
  export type ShoppingListCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * The data needed to create a ShoppingList.
     */
    data: XOR<ShoppingListCreateInput, ShoppingListUncheckedCreateInput>
  }

  /**
   * ShoppingList createMany
   */
  export type ShoppingListCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShoppingLists.
     */
    data: ShoppingListCreateManyInput | ShoppingListCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShoppingList createManyAndReturn
   */
  export type ShoppingListCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ShoppingLists.
     */
    data: ShoppingListCreateManyInput | ShoppingListCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShoppingList update
   */
  export type ShoppingListUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * The data needed to update a ShoppingList.
     */
    data: XOR<ShoppingListUpdateInput, ShoppingListUncheckedUpdateInput>
    /**
     * Choose, which ShoppingList to update.
     */
    where: ShoppingListWhereUniqueInput
  }

  /**
   * ShoppingList updateMany
   */
  export type ShoppingListUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShoppingLists.
     */
    data: XOR<ShoppingListUpdateManyMutationInput, ShoppingListUncheckedUpdateManyInput>
    /**
     * Filter which ShoppingLists to update
     */
    where?: ShoppingListWhereInput
  }

  /**
   * ShoppingList upsert
   */
  export type ShoppingListUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * The filter to search for the ShoppingList to update in case it exists.
     */
    where: ShoppingListWhereUniqueInput
    /**
     * In case the ShoppingList found by the `where` argument doesn't exist, create a new ShoppingList with this data.
     */
    create: XOR<ShoppingListCreateInput, ShoppingListUncheckedCreateInput>
    /**
     * In case the ShoppingList was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShoppingListUpdateInput, ShoppingListUncheckedUpdateInput>
  }

  /**
   * ShoppingList delete
   */
  export type ShoppingListDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
    /**
     * Filter which ShoppingList to delete.
     */
    where: ShoppingListWhereUniqueInput
  }

  /**
   * ShoppingList deleteMany
   */
  export type ShoppingListDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShoppingLists to delete
     */
    where?: ShoppingListWhereInput
  }

  /**
   * ShoppingList.items
   */
  export type ShoppingList$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    where?: ShoppingItemWhereInput
    orderBy?: ShoppingItemOrderByWithRelationInput | ShoppingItemOrderByWithRelationInput[]
    cursor?: ShoppingItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShoppingItemScalarFieldEnum | ShoppingItemScalarFieldEnum[]
  }

  /**
   * ShoppingList without action
   */
  export type ShoppingListDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingList
     */
    select?: ShoppingListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingListInclude<ExtArgs> | null
  }


  /**
   * Model ShoppingItem
   */

  export type AggregateShoppingItem = {
    _count: ShoppingItemCountAggregateOutputType | null
    _avg: ShoppingItemAvgAggregateOutputType | null
    _sum: ShoppingItemSumAggregateOutputType | null
    _min: ShoppingItemMinAggregateOutputType | null
    _max: ShoppingItemMaxAggregateOutputType | null
  }

  export type ShoppingItemAvgAggregateOutputType = {
    quantity: Decimal | null
    estimatedPrice: Decimal | null
    priority: number | null
  }

  export type ShoppingItemSumAggregateOutputType = {
    quantity: Decimal | null
    estimatedPrice: Decimal | null
    priority: number | null
  }

  export type ShoppingItemMinAggregateOutputType = {
    id: string | null
    listId: string | null
    name: string | null
    quantity: Decimal | null
    unit: string | null
    status: $Enums.ShoppingItemStatus | null
    estimatedPrice: Decimal | null
    priority: number | null
    category: string | null
    notes: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShoppingItemMaxAggregateOutputType = {
    id: string | null
    listId: string | null
    name: string | null
    quantity: Decimal | null
    unit: string | null
    status: $Enums.ShoppingItemStatus | null
    estimatedPrice: Decimal | null
    priority: number | null
    category: string | null
    notes: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShoppingItemCountAggregateOutputType = {
    id: number
    listId: number
    name: number
    quantity: number
    unit: number
    status: number
    estimatedPrice: number
    priority: number
    category: number
    notes: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ShoppingItemAvgAggregateInputType = {
    quantity?: true
    estimatedPrice?: true
    priority?: true
  }

  export type ShoppingItemSumAggregateInputType = {
    quantity?: true
    estimatedPrice?: true
    priority?: true
  }

  export type ShoppingItemMinAggregateInputType = {
    id?: true
    listId?: true
    name?: true
    quantity?: true
    unit?: true
    status?: true
    estimatedPrice?: true
    priority?: true
    category?: true
    notes?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShoppingItemMaxAggregateInputType = {
    id?: true
    listId?: true
    name?: true
    quantity?: true
    unit?: true
    status?: true
    estimatedPrice?: true
    priority?: true
    category?: true
    notes?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShoppingItemCountAggregateInputType = {
    id?: true
    listId?: true
    name?: true
    quantity?: true
    unit?: true
    status?: true
    estimatedPrice?: true
    priority?: true
    category?: true
    notes?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ShoppingItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShoppingItem to aggregate.
     */
    where?: ShoppingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingItems to fetch.
     */
    orderBy?: ShoppingItemOrderByWithRelationInput | ShoppingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShoppingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShoppingItems
    **/
    _count?: true | ShoppingItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShoppingItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShoppingItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShoppingItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShoppingItemMaxAggregateInputType
  }

  export type GetShoppingItemAggregateType<T extends ShoppingItemAggregateArgs> = {
        [P in keyof T & keyof AggregateShoppingItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShoppingItem[P]>
      : GetScalarType<T[P], AggregateShoppingItem[P]>
  }




  export type ShoppingItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShoppingItemWhereInput
    orderBy?: ShoppingItemOrderByWithAggregationInput | ShoppingItemOrderByWithAggregationInput[]
    by: ShoppingItemScalarFieldEnum[] | ShoppingItemScalarFieldEnum
    having?: ShoppingItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShoppingItemCountAggregateInputType | true
    _avg?: ShoppingItemAvgAggregateInputType
    _sum?: ShoppingItemSumAggregateInputType
    _min?: ShoppingItemMinAggregateInputType
    _max?: ShoppingItemMaxAggregateInputType
  }

  export type ShoppingItemGroupByOutputType = {
    id: string
    listId: string
    name: string
    quantity: Decimal
    unit: string | null
    status: $Enums.ShoppingItemStatus
    estimatedPrice: Decimal | null
    priority: number | null
    category: string | null
    notes: string | null
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: ShoppingItemCountAggregateOutputType | null
    _avg: ShoppingItemAvgAggregateOutputType | null
    _sum: ShoppingItemSumAggregateOutputType | null
    _min: ShoppingItemMinAggregateOutputType | null
    _max: ShoppingItemMaxAggregateOutputType | null
  }

  type GetShoppingItemGroupByPayload<T extends ShoppingItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShoppingItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShoppingItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShoppingItemGroupByOutputType[P]>
            : GetScalarType<T[P], ShoppingItemGroupByOutputType[P]>
        }
      >
    >


  export type ShoppingItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    listId?: boolean
    name?: boolean
    quantity?: boolean
    unit?: boolean
    status?: boolean
    estimatedPrice?: boolean
    priority?: boolean
    category?: boolean
    notes?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    list?: boolean | ShoppingListDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shoppingItem"]>

  export type ShoppingItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    listId?: boolean
    name?: boolean
    quantity?: boolean
    unit?: boolean
    status?: boolean
    estimatedPrice?: boolean
    priority?: boolean
    category?: boolean
    notes?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    list?: boolean | ShoppingListDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shoppingItem"]>

  export type ShoppingItemSelectScalar = {
    id?: boolean
    listId?: boolean
    name?: boolean
    quantity?: boolean
    unit?: boolean
    status?: boolean
    estimatedPrice?: boolean
    priority?: boolean
    category?: boolean
    notes?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ShoppingItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    list?: boolean | ShoppingListDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ShoppingItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    list?: boolean | ShoppingListDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ShoppingItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShoppingItem"
    objects: {
      list: Prisma.$ShoppingListPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      listId: string
      name: string
      quantity: Prisma.Decimal
      unit: string | null
      status: $Enums.ShoppingItemStatus
      estimatedPrice: Prisma.Decimal | null
      priority: number | null
      category: string | null
      notes: string | null
      userId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["shoppingItem"]>
    composites: {}
  }

  type ShoppingItemGetPayload<S extends boolean | null | undefined | ShoppingItemDefaultArgs> = $Result.GetResult<Prisma.$ShoppingItemPayload, S>

  type ShoppingItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ShoppingItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShoppingItemCountAggregateInputType | true
    }

  export interface ShoppingItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShoppingItem'], meta: { name: 'ShoppingItem' } }
    /**
     * Find zero or one ShoppingItem that matches the filter.
     * @param {ShoppingItemFindUniqueArgs} args - Arguments to find a ShoppingItem
     * @example
     * // Get one ShoppingItem
     * const shoppingItem = await prisma.shoppingItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShoppingItemFindUniqueArgs>(args: SelectSubset<T, ShoppingItemFindUniqueArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ShoppingItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ShoppingItemFindUniqueOrThrowArgs} args - Arguments to find a ShoppingItem
     * @example
     * // Get one ShoppingItem
     * const shoppingItem = await prisma.shoppingItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShoppingItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ShoppingItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ShoppingItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingItemFindFirstArgs} args - Arguments to find a ShoppingItem
     * @example
     * // Get one ShoppingItem
     * const shoppingItem = await prisma.shoppingItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShoppingItemFindFirstArgs>(args?: SelectSubset<T, ShoppingItemFindFirstArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ShoppingItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingItemFindFirstOrThrowArgs} args - Arguments to find a ShoppingItem
     * @example
     * // Get one ShoppingItem
     * const shoppingItem = await prisma.shoppingItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShoppingItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ShoppingItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ShoppingItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShoppingItems
     * const shoppingItems = await prisma.shoppingItem.findMany()
     * 
     * // Get first 10 ShoppingItems
     * const shoppingItems = await prisma.shoppingItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shoppingItemWithIdOnly = await prisma.shoppingItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShoppingItemFindManyArgs>(args?: SelectSubset<T, ShoppingItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ShoppingItem.
     * @param {ShoppingItemCreateArgs} args - Arguments to create a ShoppingItem.
     * @example
     * // Create one ShoppingItem
     * const ShoppingItem = await prisma.shoppingItem.create({
     *   data: {
     *     // ... data to create a ShoppingItem
     *   }
     * })
     * 
     */
    create<T extends ShoppingItemCreateArgs>(args: SelectSubset<T, ShoppingItemCreateArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ShoppingItems.
     * @param {ShoppingItemCreateManyArgs} args - Arguments to create many ShoppingItems.
     * @example
     * // Create many ShoppingItems
     * const shoppingItem = await prisma.shoppingItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShoppingItemCreateManyArgs>(args?: SelectSubset<T, ShoppingItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShoppingItems and returns the data saved in the database.
     * @param {ShoppingItemCreateManyAndReturnArgs} args - Arguments to create many ShoppingItems.
     * @example
     * // Create many ShoppingItems
     * const shoppingItem = await prisma.shoppingItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShoppingItems and only return the `id`
     * const shoppingItemWithIdOnly = await prisma.shoppingItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShoppingItemCreateManyAndReturnArgs>(args?: SelectSubset<T, ShoppingItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ShoppingItem.
     * @param {ShoppingItemDeleteArgs} args - Arguments to delete one ShoppingItem.
     * @example
     * // Delete one ShoppingItem
     * const ShoppingItem = await prisma.shoppingItem.delete({
     *   where: {
     *     // ... filter to delete one ShoppingItem
     *   }
     * })
     * 
     */
    delete<T extends ShoppingItemDeleteArgs>(args: SelectSubset<T, ShoppingItemDeleteArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ShoppingItem.
     * @param {ShoppingItemUpdateArgs} args - Arguments to update one ShoppingItem.
     * @example
     * // Update one ShoppingItem
     * const shoppingItem = await prisma.shoppingItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShoppingItemUpdateArgs>(args: SelectSubset<T, ShoppingItemUpdateArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ShoppingItems.
     * @param {ShoppingItemDeleteManyArgs} args - Arguments to filter ShoppingItems to delete.
     * @example
     * // Delete a few ShoppingItems
     * const { count } = await prisma.shoppingItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShoppingItemDeleteManyArgs>(args?: SelectSubset<T, ShoppingItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShoppingItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShoppingItems
     * const shoppingItem = await prisma.shoppingItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShoppingItemUpdateManyArgs>(args: SelectSubset<T, ShoppingItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ShoppingItem.
     * @param {ShoppingItemUpsertArgs} args - Arguments to update or create a ShoppingItem.
     * @example
     * // Update or create a ShoppingItem
     * const shoppingItem = await prisma.shoppingItem.upsert({
     *   create: {
     *     // ... data to create a ShoppingItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShoppingItem we want to update
     *   }
     * })
     */
    upsert<T extends ShoppingItemUpsertArgs>(args: SelectSubset<T, ShoppingItemUpsertArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ShoppingItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingItemCountArgs} args - Arguments to filter ShoppingItems to count.
     * @example
     * // Count the number of ShoppingItems
     * const count = await prisma.shoppingItem.count({
     *   where: {
     *     // ... the filter for the ShoppingItems we want to count
     *   }
     * })
    **/
    count<T extends ShoppingItemCountArgs>(
      args?: Subset<T, ShoppingItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShoppingItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShoppingItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShoppingItemAggregateArgs>(args: Subset<T, ShoppingItemAggregateArgs>): Prisma.PrismaPromise<GetShoppingItemAggregateType<T>>

    /**
     * Group by ShoppingItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShoppingItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShoppingItemGroupByArgs['orderBy'] }
        : { orderBy?: ShoppingItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShoppingItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShoppingItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShoppingItem model
   */
  readonly fields: ShoppingItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShoppingItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShoppingItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    list<T extends ShoppingListDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShoppingListDefaultArgs<ExtArgs>>): Prisma__ShoppingListClient<$Result.GetResult<Prisma.$ShoppingListPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShoppingItem model
   */ 
  interface ShoppingItemFieldRefs {
    readonly id: FieldRef<"ShoppingItem", 'String'>
    readonly listId: FieldRef<"ShoppingItem", 'String'>
    readonly name: FieldRef<"ShoppingItem", 'String'>
    readonly quantity: FieldRef<"ShoppingItem", 'Decimal'>
    readonly unit: FieldRef<"ShoppingItem", 'String'>
    readonly status: FieldRef<"ShoppingItem", 'ShoppingItemStatus'>
    readonly estimatedPrice: FieldRef<"ShoppingItem", 'Decimal'>
    readonly priority: FieldRef<"ShoppingItem", 'Int'>
    readonly category: FieldRef<"ShoppingItem", 'String'>
    readonly notes: FieldRef<"ShoppingItem", 'String'>
    readonly userId: FieldRef<"ShoppingItem", 'String'>
    readonly createdAt: FieldRef<"ShoppingItem", 'DateTime'>
    readonly updatedAt: FieldRef<"ShoppingItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ShoppingItem findUnique
   */
  export type ShoppingItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingItem to fetch.
     */
    where: ShoppingItemWhereUniqueInput
  }

  /**
   * ShoppingItem findUniqueOrThrow
   */
  export type ShoppingItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingItem to fetch.
     */
    where: ShoppingItemWhereUniqueInput
  }

  /**
   * ShoppingItem findFirst
   */
  export type ShoppingItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingItem to fetch.
     */
    where?: ShoppingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingItems to fetch.
     */
    orderBy?: ShoppingItemOrderByWithRelationInput | ShoppingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShoppingItems.
     */
    cursor?: ShoppingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShoppingItems.
     */
    distinct?: ShoppingItemScalarFieldEnum | ShoppingItemScalarFieldEnum[]
  }

  /**
   * ShoppingItem findFirstOrThrow
   */
  export type ShoppingItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingItem to fetch.
     */
    where?: ShoppingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingItems to fetch.
     */
    orderBy?: ShoppingItemOrderByWithRelationInput | ShoppingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShoppingItems.
     */
    cursor?: ShoppingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShoppingItems.
     */
    distinct?: ShoppingItemScalarFieldEnum | ShoppingItemScalarFieldEnum[]
  }

  /**
   * ShoppingItem findMany
   */
  export type ShoppingItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingItems to fetch.
     */
    where?: ShoppingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingItems to fetch.
     */
    orderBy?: ShoppingItemOrderByWithRelationInput | ShoppingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShoppingItems.
     */
    cursor?: ShoppingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingItems.
     */
    skip?: number
    distinct?: ShoppingItemScalarFieldEnum | ShoppingItemScalarFieldEnum[]
  }

  /**
   * ShoppingItem create
   */
  export type ShoppingItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * The data needed to create a ShoppingItem.
     */
    data: XOR<ShoppingItemCreateInput, ShoppingItemUncheckedCreateInput>
  }

  /**
   * ShoppingItem createMany
   */
  export type ShoppingItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShoppingItems.
     */
    data: ShoppingItemCreateManyInput | ShoppingItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShoppingItem createManyAndReturn
   */
  export type ShoppingItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ShoppingItems.
     */
    data: ShoppingItemCreateManyInput | ShoppingItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShoppingItem update
   */
  export type ShoppingItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * The data needed to update a ShoppingItem.
     */
    data: XOR<ShoppingItemUpdateInput, ShoppingItemUncheckedUpdateInput>
    /**
     * Choose, which ShoppingItem to update.
     */
    where: ShoppingItemWhereUniqueInput
  }

  /**
   * ShoppingItem updateMany
   */
  export type ShoppingItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShoppingItems.
     */
    data: XOR<ShoppingItemUpdateManyMutationInput, ShoppingItemUncheckedUpdateManyInput>
    /**
     * Filter which ShoppingItems to update
     */
    where?: ShoppingItemWhereInput
  }

  /**
   * ShoppingItem upsert
   */
  export type ShoppingItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * The filter to search for the ShoppingItem to update in case it exists.
     */
    where: ShoppingItemWhereUniqueInput
    /**
     * In case the ShoppingItem found by the `where` argument doesn't exist, create a new ShoppingItem with this data.
     */
    create: XOR<ShoppingItemCreateInput, ShoppingItemUncheckedCreateInput>
    /**
     * In case the ShoppingItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShoppingItemUpdateInput, ShoppingItemUncheckedUpdateInput>
  }

  /**
   * ShoppingItem delete
   */
  export type ShoppingItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * Filter which ShoppingItem to delete.
     */
    where: ShoppingItemWhereUniqueInput
  }

  /**
   * ShoppingItem deleteMany
   */
  export type ShoppingItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShoppingItems to delete
     */
    where?: ShoppingItemWhereInput
  }

  /**
   * ShoppingItem without action
   */
  export type ShoppingItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
  }


  /**
   * Model ShoppingCategory
   */

  export type AggregateShoppingCategory = {
    _count: ShoppingCategoryCountAggregateOutputType | null
    _min: ShoppingCategoryMinAggregateOutputType | null
    _max: ShoppingCategoryMaxAggregateOutputType | null
  }

  export type ShoppingCategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
    familyId: string | null
    color: string | null
    icon: string | null
  }

  export type ShoppingCategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
    familyId: string | null
    color: string | null
    icon: string | null
  }

  export type ShoppingCategoryCountAggregateOutputType = {
    id: number
    name: number
    userId: number
    familyId: number
    color: number
    icon: number
    _all: number
  }


  export type ShoppingCategoryMinAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    familyId?: true
    color?: true
    icon?: true
  }

  export type ShoppingCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    familyId?: true
    color?: true
    icon?: true
  }

  export type ShoppingCategoryCountAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    familyId?: true
    color?: true
    icon?: true
    _all?: true
  }

  export type ShoppingCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShoppingCategory to aggregate.
     */
    where?: ShoppingCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingCategories to fetch.
     */
    orderBy?: ShoppingCategoryOrderByWithRelationInput | ShoppingCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShoppingCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShoppingCategories
    **/
    _count?: true | ShoppingCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShoppingCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShoppingCategoryMaxAggregateInputType
  }

  export type GetShoppingCategoryAggregateType<T extends ShoppingCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateShoppingCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShoppingCategory[P]>
      : GetScalarType<T[P], AggregateShoppingCategory[P]>
  }




  export type ShoppingCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShoppingCategoryWhereInput
    orderBy?: ShoppingCategoryOrderByWithAggregationInput | ShoppingCategoryOrderByWithAggregationInput[]
    by: ShoppingCategoryScalarFieldEnum[] | ShoppingCategoryScalarFieldEnum
    having?: ShoppingCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShoppingCategoryCountAggregateInputType | true
    _min?: ShoppingCategoryMinAggregateInputType
    _max?: ShoppingCategoryMaxAggregateInputType
  }

  export type ShoppingCategoryGroupByOutputType = {
    id: string
    name: string
    userId: string
    familyId: string
    color: string | null
    icon: string | null
    _count: ShoppingCategoryCountAggregateOutputType | null
    _min: ShoppingCategoryMinAggregateOutputType | null
    _max: ShoppingCategoryMaxAggregateOutputType | null
  }

  type GetShoppingCategoryGroupByPayload<T extends ShoppingCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShoppingCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShoppingCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShoppingCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], ShoppingCategoryGroupByOutputType[P]>
        }
      >
    >


  export type ShoppingCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    familyId?: boolean
    color?: boolean
    icon?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    family?: boolean | FamilyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shoppingCategory"]>

  export type ShoppingCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    familyId?: boolean
    color?: boolean
    icon?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    family?: boolean | FamilyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shoppingCategory"]>

  export type ShoppingCategorySelectScalar = {
    id?: boolean
    name?: boolean
    userId?: boolean
    familyId?: boolean
    color?: boolean
    icon?: boolean
  }

  export type ShoppingCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    family?: boolean | FamilyDefaultArgs<ExtArgs>
  }
  export type ShoppingCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    family?: boolean | FamilyDefaultArgs<ExtArgs>
  }

  export type $ShoppingCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShoppingCategory"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      family: Prisma.$FamilyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      userId: string
      familyId: string
      color: string | null
      icon: string | null
    }, ExtArgs["result"]["shoppingCategory"]>
    composites: {}
  }

  type ShoppingCategoryGetPayload<S extends boolean | null | undefined | ShoppingCategoryDefaultArgs> = $Result.GetResult<Prisma.$ShoppingCategoryPayload, S>

  type ShoppingCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ShoppingCategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShoppingCategoryCountAggregateInputType | true
    }

  export interface ShoppingCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShoppingCategory'], meta: { name: 'ShoppingCategory' } }
    /**
     * Find zero or one ShoppingCategory that matches the filter.
     * @param {ShoppingCategoryFindUniqueArgs} args - Arguments to find a ShoppingCategory
     * @example
     * // Get one ShoppingCategory
     * const shoppingCategory = await prisma.shoppingCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShoppingCategoryFindUniqueArgs>(args: SelectSubset<T, ShoppingCategoryFindUniqueArgs<ExtArgs>>): Prisma__ShoppingCategoryClient<$Result.GetResult<Prisma.$ShoppingCategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ShoppingCategory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ShoppingCategoryFindUniqueOrThrowArgs} args - Arguments to find a ShoppingCategory
     * @example
     * // Get one ShoppingCategory
     * const shoppingCategory = await prisma.shoppingCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShoppingCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ShoppingCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShoppingCategoryClient<$Result.GetResult<Prisma.$ShoppingCategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ShoppingCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingCategoryFindFirstArgs} args - Arguments to find a ShoppingCategory
     * @example
     * // Get one ShoppingCategory
     * const shoppingCategory = await prisma.shoppingCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShoppingCategoryFindFirstArgs>(args?: SelectSubset<T, ShoppingCategoryFindFirstArgs<ExtArgs>>): Prisma__ShoppingCategoryClient<$Result.GetResult<Prisma.$ShoppingCategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ShoppingCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingCategoryFindFirstOrThrowArgs} args - Arguments to find a ShoppingCategory
     * @example
     * // Get one ShoppingCategory
     * const shoppingCategory = await prisma.shoppingCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShoppingCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ShoppingCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShoppingCategoryClient<$Result.GetResult<Prisma.$ShoppingCategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ShoppingCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShoppingCategories
     * const shoppingCategories = await prisma.shoppingCategory.findMany()
     * 
     * // Get first 10 ShoppingCategories
     * const shoppingCategories = await prisma.shoppingCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shoppingCategoryWithIdOnly = await prisma.shoppingCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShoppingCategoryFindManyArgs>(args?: SelectSubset<T, ShoppingCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingCategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ShoppingCategory.
     * @param {ShoppingCategoryCreateArgs} args - Arguments to create a ShoppingCategory.
     * @example
     * // Create one ShoppingCategory
     * const ShoppingCategory = await prisma.shoppingCategory.create({
     *   data: {
     *     // ... data to create a ShoppingCategory
     *   }
     * })
     * 
     */
    create<T extends ShoppingCategoryCreateArgs>(args: SelectSubset<T, ShoppingCategoryCreateArgs<ExtArgs>>): Prisma__ShoppingCategoryClient<$Result.GetResult<Prisma.$ShoppingCategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ShoppingCategories.
     * @param {ShoppingCategoryCreateManyArgs} args - Arguments to create many ShoppingCategories.
     * @example
     * // Create many ShoppingCategories
     * const shoppingCategory = await prisma.shoppingCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShoppingCategoryCreateManyArgs>(args?: SelectSubset<T, ShoppingCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShoppingCategories and returns the data saved in the database.
     * @param {ShoppingCategoryCreateManyAndReturnArgs} args - Arguments to create many ShoppingCategories.
     * @example
     * // Create many ShoppingCategories
     * const shoppingCategory = await prisma.shoppingCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShoppingCategories and only return the `id`
     * const shoppingCategoryWithIdOnly = await prisma.shoppingCategory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShoppingCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, ShoppingCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingCategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ShoppingCategory.
     * @param {ShoppingCategoryDeleteArgs} args - Arguments to delete one ShoppingCategory.
     * @example
     * // Delete one ShoppingCategory
     * const ShoppingCategory = await prisma.shoppingCategory.delete({
     *   where: {
     *     // ... filter to delete one ShoppingCategory
     *   }
     * })
     * 
     */
    delete<T extends ShoppingCategoryDeleteArgs>(args: SelectSubset<T, ShoppingCategoryDeleteArgs<ExtArgs>>): Prisma__ShoppingCategoryClient<$Result.GetResult<Prisma.$ShoppingCategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ShoppingCategory.
     * @param {ShoppingCategoryUpdateArgs} args - Arguments to update one ShoppingCategory.
     * @example
     * // Update one ShoppingCategory
     * const shoppingCategory = await prisma.shoppingCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShoppingCategoryUpdateArgs>(args: SelectSubset<T, ShoppingCategoryUpdateArgs<ExtArgs>>): Prisma__ShoppingCategoryClient<$Result.GetResult<Prisma.$ShoppingCategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ShoppingCategories.
     * @param {ShoppingCategoryDeleteManyArgs} args - Arguments to filter ShoppingCategories to delete.
     * @example
     * // Delete a few ShoppingCategories
     * const { count } = await prisma.shoppingCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShoppingCategoryDeleteManyArgs>(args?: SelectSubset<T, ShoppingCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShoppingCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShoppingCategories
     * const shoppingCategory = await prisma.shoppingCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShoppingCategoryUpdateManyArgs>(args: SelectSubset<T, ShoppingCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ShoppingCategory.
     * @param {ShoppingCategoryUpsertArgs} args - Arguments to update or create a ShoppingCategory.
     * @example
     * // Update or create a ShoppingCategory
     * const shoppingCategory = await prisma.shoppingCategory.upsert({
     *   create: {
     *     // ... data to create a ShoppingCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShoppingCategory we want to update
     *   }
     * })
     */
    upsert<T extends ShoppingCategoryUpsertArgs>(args: SelectSubset<T, ShoppingCategoryUpsertArgs<ExtArgs>>): Prisma__ShoppingCategoryClient<$Result.GetResult<Prisma.$ShoppingCategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ShoppingCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingCategoryCountArgs} args - Arguments to filter ShoppingCategories to count.
     * @example
     * // Count the number of ShoppingCategories
     * const count = await prisma.shoppingCategory.count({
     *   where: {
     *     // ... the filter for the ShoppingCategories we want to count
     *   }
     * })
    **/
    count<T extends ShoppingCategoryCountArgs>(
      args?: Subset<T, ShoppingCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShoppingCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShoppingCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShoppingCategoryAggregateArgs>(args: Subset<T, ShoppingCategoryAggregateArgs>): Prisma.PrismaPromise<GetShoppingCategoryAggregateType<T>>

    /**
     * Group by ShoppingCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShoppingCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShoppingCategoryGroupByArgs['orderBy'] }
        : { orderBy?: ShoppingCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShoppingCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShoppingCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShoppingCategory model
   */
  readonly fields: ShoppingCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShoppingCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShoppingCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    family<T extends FamilyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FamilyDefaultArgs<ExtArgs>>): Prisma__FamilyClient<$Result.GetResult<Prisma.$FamilyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShoppingCategory model
   */ 
  interface ShoppingCategoryFieldRefs {
    readonly id: FieldRef<"ShoppingCategory", 'String'>
    readonly name: FieldRef<"ShoppingCategory", 'String'>
    readonly userId: FieldRef<"ShoppingCategory", 'String'>
    readonly familyId: FieldRef<"ShoppingCategory", 'String'>
    readonly color: FieldRef<"ShoppingCategory", 'String'>
    readonly icon: FieldRef<"ShoppingCategory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ShoppingCategory findUnique
   */
  export type ShoppingCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingCategory
     */
    select?: ShoppingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingCategory to fetch.
     */
    where: ShoppingCategoryWhereUniqueInput
  }

  /**
   * ShoppingCategory findUniqueOrThrow
   */
  export type ShoppingCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingCategory
     */
    select?: ShoppingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingCategory to fetch.
     */
    where: ShoppingCategoryWhereUniqueInput
  }

  /**
   * ShoppingCategory findFirst
   */
  export type ShoppingCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingCategory
     */
    select?: ShoppingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingCategory to fetch.
     */
    where?: ShoppingCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingCategories to fetch.
     */
    orderBy?: ShoppingCategoryOrderByWithRelationInput | ShoppingCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShoppingCategories.
     */
    cursor?: ShoppingCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShoppingCategories.
     */
    distinct?: ShoppingCategoryScalarFieldEnum | ShoppingCategoryScalarFieldEnum[]
  }

  /**
   * ShoppingCategory findFirstOrThrow
   */
  export type ShoppingCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingCategory
     */
    select?: ShoppingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingCategory to fetch.
     */
    where?: ShoppingCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingCategories to fetch.
     */
    orderBy?: ShoppingCategoryOrderByWithRelationInput | ShoppingCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShoppingCategories.
     */
    cursor?: ShoppingCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShoppingCategories.
     */
    distinct?: ShoppingCategoryScalarFieldEnum | ShoppingCategoryScalarFieldEnum[]
  }

  /**
   * ShoppingCategory findMany
   */
  export type ShoppingCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingCategory
     */
    select?: ShoppingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingCategories to fetch.
     */
    where?: ShoppingCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingCategories to fetch.
     */
    orderBy?: ShoppingCategoryOrderByWithRelationInput | ShoppingCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShoppingCategories.
     */
    cursor?: ShoppingCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingCategories.
     */
    skip?: number
    distinct?: ShoppingCategoryScalarFieldEnum | ShoppingCategoryScalarFieldEnum[]
  }

  /**
   * ShoppingCategory create
   */
  export type ShoppingCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingCategory
     */
    select?: ShoppingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ShoppingCategory.
     */
    data: XOR<ShoppingCategoryCreateInput, ShoppingCategoryUncheckedCreateInput>
  }

  /**
   * ShoppingCategory createMany
   */
  export type ShoppingCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShoppingCategories.
     */
    data: ShoppingCategoryCreateManyInput | ShoppingCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShoppingCategory createManyAndReturn
   */
  export type ShoppingCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingCategory
     */
    select?: ShoppingCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ShoppingCategories.
     */
    data: ShoppingCategoryCreateManyInput | ShoppingCategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingCategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShoppingCategory update
   */
  export type ShoppingCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingCategory
     */
    select?: ShoppingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ShoppingCategory.
     */
    data: XOR<ShoppingCategoryUpdateInput, ShoppingCategoryUncheckedUpdateInput>
    /**
     * Choose, which ShoppingCategory to update.
     */
    where: ShoppingCategoryWhereUniqueInput
  }

  /**
   * ShoppingCategory updateMany
   */
  export type ShoppingCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShoppingCategories.
     */
    data: XOR<ShoppingCategoryUpdateManyMutationInput, ShoppingCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ShoppingCategories to update
     */
    where?: ShoppingCategoryWhereInput
  }

  /**
   * ShoppingCategory upsert
   */
  export type ShoppingCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingCategory
     */
    select?: ShoppingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ShoppingCategory to update in case it exists.
     */
    where: ShoppingCategoryWhereUniqueInput
    /**
     * In case the ShoppingCategory found by the `where` argument doesn't exist, create a new ShoppingCategory with this data.
     */
    create: XOR<ShoppingCategoryCreateInput, ShoppingCategoryUncheckedCreateInput>
    /**
     * In case the ShoppingCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShoppingCategoryUpdateInput, ShoppingCategoryUncheckedUpdateInput>
  }

  /**
   * ShoppingCategory delete
   */
  export type ShoppingCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingCategory
     */
    select?: ShoppingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingCategoryInclude<ExtArgs> | null
    /**
     * Filter which ShoppingCategory to delete.
     */
    where: ShoppingCategoryWhereUniqueInput
  }

  /**
   * ShoppingCategory deleteMany
   */
  export type ShoppingCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShoppingCategories to delete
     */
    where?: ShoppingCategoryWhereInput
  }

  /**
   * ShoppingCategory without action
   */
  export type ShoppingCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingCategory
     */
    select?: ShoppingCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingCategoryInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    familyId: 'familyId',
    name: 'name'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const FamilyScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type FamilyScalarFieldEnum = (typeof FamilyScalarFieldEnum)[keyof typeof FamilyScalarFieldEnum]


  export const ShoppingListScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    status: 'status',
    userId: 'userId',
    familyId: 'familyId',
    totalEstimatedCost: 'totalEstimatedCost',
    dueDate: 'dueDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ShoppingListScalarFieldEnum = (typeof ShoppingListScalarFieldEnum)[keyof typeof ShoppingListScalarFieldEnum]


  export const ShoppingItemScalarFieldEnum: {
    id: 'id',
    listId: 'listId',
    name: 'name',
    quantity: 'quantity',
    unit: 'unit',
    status: 'status',
    estimatedPrice: 'estimatedPrice',
    priority: 'priority',
    category: 'category',
    notes: 'notes',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ShoppingItemScalarFieldEnum = (typeof ShoppingItemScalarFieldEnum)[keyof typeof ShoppingItemScalarFieldEnum]


  export const ShoppingCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userId: 'userId',
    familyId: 'familyId',
    color: 'color',
    icon: 'icon'
  };

  export type ShoppingCategoryScalarFieldEnum = (typeof ShoppingCategoryScalarFieldEnum)[keyof typeof ShoppingCategoryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'ShoppingListStatus'
   */
  export type EnumShoppingListStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ShoppingListStatus'>
    


  /**
   * Reference to a field of type 'ShoppingListStatus[]'
   */
  export type ListEnumShoppingListStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ShoppingListStatus[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'ShoppingItemStatus'
   */
  export type EnumShoppingItemStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ShoppingItemStatus'>
    


  /**
   * Reference to a field of type 'ShoppingItemStatus[]'
   */
  export type ListEnumShoppingItemStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ShoppingItemStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    familyId?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    shoppingLists?: ShoppingListListRelationFilter
    shoppingItems?: ShoppingItemListRelationFilter
    shoppingCategories?: ShoppingCategoryListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    familyId?: SortOrder
    name?: SortOrder
    shoppingLists?: ShoppingListOrderByRelationAggregateInput
    shoppingItems?: ShoppingItemOrderByRelationAggregateInput
    shoppingCategories?: ShoppingCategoryOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    familyId?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    shoppingLists?: ShoppingListListRelationFilter
    shoppingItems?: ShoppingItemListRelationFilter
    shoppingCategories?: ShoppingCategoryListRelationFilter
  }, "id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    familyId?: SortOrder
    name?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    familyId?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
  }

  export type FamilyWhereInput = {
    AND?: FamilyWhereInput | FamilyWhereInput[]
    OR?: FamilyWhereInput[]
    NOT?: FamilyWhereInput | FamilyWhereInput[]
    id?: StringFilter<"Family"> | string
    name?: StringFilter<"Family"> | string
    shoppingLists?: ShoppingListListRelationFilter
    shoppingCategories?: ShoppingCategoryListRelationFilter
  }

  export type FamilyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    shoppingLists?: ShoppingListOrderByRelationAggregateInput
    shoppingCategories?: ShoppingCategoryOrderByRelationAggregateInput
  }

  export type FamilyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FamilyWhereInput | FamilyWhereInput[]
    OR?: FamilyWhereInput[]
    NOT?: FamilyWhereInput | FamilyWhereInput[]
    name?: StringFilter<"Family"> | string
    shoppingLists?: ShoppingListListRelationFilter
    shoppingCategories?: ShoppingCategoryListRelationFilter
  }, "id">

  export type FamilyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: FamilyCountOrderByAggregateInput
    _max?: FamilyMaxOrderByAggregateInput
    _min?: FamilyMinOrderByAggregateInput
  }

  export type FamilyScalarWhereWithAggregatesInput = {
    AND?: FamilyScalarWhereWithAggregatesInput | FamilyScalarWhereWithAggregatesInput[]
    OR?: FamilyScalarWhereWithAggregatesInput[]
    NOT?: FamilyScalarWhereWithAggregatesInput | FamilyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Family"> | string
    name?: StringWithAggregatesFilter<"Family"> | string
  }

  export type ShoppingListWhereInput = {
    AND?: ShoppingListWhereInput | ShoppingListWhereInput[]
    OR?: ShoppingListWhereInput[]
    NOT?: ShoppingListWhereInput | ShoppingListWhereInput[]
    id?: StringFilter<"ShoppingList"> | string
    title?: StringFilter<"ShoppingList"> | string
    description?: StringNullableFilter<"ShoppingList"> | string | null
    status?: EnumShoppingListStatusFilter<"ShoppingList"> | $Enums.ShoppingListStatus
    userId?: StringFilter<"ShoppingList"> | string
    familyId?: StringFilter<"ShoppingList"> | string
    totalEstimatedCost?: DecimalNullableFilter<"ShoppingList"> | Decimal | DecimalJsLike | number | string | null
    dueDate?: DateTimeNullableFilter<"ShoppingList"> | Date | string | null
    createdAt?: DateTimeFilter<"ShoppingList"> | Date | string
    updatedAt?: DateTimeFilter<"ShoppingList"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    family?: XOR<FamilyRelationFilter, FamilyWhereInput>
    items?: ShoppingItemListRelationFilter
  }

  export type ShoppingListOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    userId?: SortOrder
    familyId?: SortOrder
    totalEstimatedCost?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    family?: FamilyOrderByWithRelationInput
    items?: ShoppingItemOrderByRelationAggregateInput
  }

  export type ShoppingListWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ShoppingListWhereInput | ShoppingListWhereInput[]
    OR?: ShoppingListWhereInput[]
    NOT?: ShoppingListWhereInput | ShoppingListWhereInput[]
    title?: StringFilter<"ShoppingList"> | string
    description?: StringNullableFilter<"ShoppingList"> | string | null
    status?: EnumShoppingListStatusFilter<"ShoppingList"> | $Enums.ShoppingListStatus
    userId?: StringFilter<"ShoppingList"> | string
    familyId?: StringFilter<"ShoppingList"> | string
    totalEstimatedCost?: DecimalNullableFilter<"ShoppingList"> | Decimal | DecimalJsLike | number | string | null
    dueDate?: DateTimeNullableFilter<"ShoppingList"> | Date | string | null
    createdAt?: DateTimeFilter<"ShoppingList"> | Date | string
    updatedAt?: DateTimeFilter<"ShoppingList"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    family?: XOR<FamilyRelationFilter, FamilyWhereInput>
    items?: ShoppingItemListRelationFilter
  }, "id">

  export type ShoppingListOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    userId?: SortOrder
    familyId?: SortOrder
    totalEstimatedCost?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ShoppingListCountOrderByAggregateInput
    _avg?: ShoppingListAvgOrderByAggregateInput
    _max?: ShoppingListMaxOrderByAggregateInput
    _min?: ShoppingListMinOrderByAggregateInput
    _sum?: ShoppingListSumOrderByAggregateInput
  }

  export type ShoppingListScalarWhereWithAggregatesInput = {
    AND?: ShoppingListScalarWhereWithAggregatesInput | ShoppingListScalarWhereWithAggregatesInput[]
    OR?: ShoppingListScalarWhereWithAggregatesInput[]
    NOT?: ShoppingListScalarWhereWithAggregatesInput | ShoppingListScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ShoppingList"> | string
    title?: StringWithAggregatesFilter<"ShoppingList"> | string
    description?: StringNullableWithAggregatesFilter<"ShoppingList"> | string | null
    status?: EnumShoppingListStatusWithAggregatesFilter<"ShoppingList"> | $Enums.ShoppingListStatus
    userId?: StringWithAggregatesFilter<"ShoppingList"> | string
    familyId?: StringWithAggregatesFilter<"ShoppingList"> | string
    totalEstimatedCost?: DecimalNullableWithAggregatesFilter<"ShoppingList"> | Decimal | DecimalJsLike | number | string | null
    dueDate?: DateTimeNullableWithAggregatesFilter<"ShoppingList"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ShoppingList"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ShoppingList"> | Date | string
  }

  export type ShoppingItemWhereInput = {
    AND?: ShoppingItemWhereInput | ShoppingItemWhereInput[]
    OR?: ShoppingItemWhereInput[]
    NOT?: ShoppingItemWhereInput | ShoppingItemWhereInput[]
    id?: StringFilter<"ShoppingItem"> | string
    listId?: StringFilter<"ShoppingItem"> | string
    name?: StringFilter<"ShoppingItem"> | string
    quantity?: DecimalFilter<"ShoppingItem"> | Decimal | DecimalJsLike | number | string
    unit?: StringNullableFilter<"ShoppingItem"> | string | null
    status?: EnumShoppingItemStatusFilter<"ShoppingItem"> | $Enums.ShoppingItemStatus
    estimatedPrice?: DecimalNullableFilter<"ShoppingItem"> | Decimal | DecimalJsLike | number | string | null
    priority?: IntNullableFilter<"ShoppingItem"> | number | null
    category?: StringNullableFilter<"ShoppingItem"> | string | null
    notes?: StringNullableFilter<"ShoppingItem"> | string | null
    userId?: StringFilter<"ShoppingItem"> | string
    createdAt?: DateTimeFilter<"ShoppingItem"> | Date | string
    updatedAt?: DateTimeFilter<"ShoppingItem"> | Date | string
    list?: XOR<ShoppingListRelationFilter, ShoppingListWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ShoppingItemOrderByWithRelationInput = {
    id?: SortOrder
    listId?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    unit?: SortOrderInput | SortOrder
    status?: SortOrder
    estimatedPrice?: SortOrderInput | SortOrder
    priority?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    list?: ShoppingListOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ShoppingItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ShoppingItemWhereInput | ShoppingItemWhereInput[]
    OR?: ShoppingItemWhereInput[]
    NOT?: ShoppingItemWhereInput | ShoppingItemWhereInput[]
    listId?: StringFilter<"ShoppingItem"> | string
    name?: StringFilter<"ShoppingItem"> | string
    quantity?: DecimalFilter<"ShoppingItem"> | Decimal | DecimalJsLike | number | string
    unit?: StringNullableFilter<"ShoppingItem"> | string | null
    status?: EnumShoppingItemStatusFilter<"ShoppingItem"> | $Enums.ShoppingItemStatus
    estimatedPrice?: DecimalNullableFilter<"ShoppingItem"> | Decimal | DecimalJsLike | number | string | null
    priority?: IntNullableFilter<"ShoppingItem"> | number | null
    category?: StringNullableFilter<"ShoppingItem"> | string | null
    notes?: StringNullableFilter<"ShoppingItem"> | string | null
    userId?: StringFilter<"ShoppingItem"> | string
    createdAt?: DateTimeFilter<"ShoppingItem"> | Date | string
    updatedAt?: DateTimeFilter<"ShoppingItem"> | Date | string
    list?: XOR<ShoppingListRelationFilter, ShoppingListWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ShoppingItemOrderByWithAggregationInput = {
    id?: SortOrder
    listId?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    unit?: SortOrderInput | SortOrder
    status?: SortOrder
    estimatedPrice?: SortOrderInput | SortOrder
    priority?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ShoppingItemCountOrderByAggregateInput
    _avg?: ShoppingItemAvgOrderByAggregateInput
    _max?: ShoppingItemMaxOrderByAggregateInput
    _min?: ShoppingItemMinOrderByAggregateInput
    _sum?: ShoppingItemSumOrderByAggregateInput
  }

  export type ShoppingItemScalarWhereWithAggregatesInput = {
    AND?: ShoppingItemScalarWhereWithAggregatesInput | ShoppingItemScalarWhereWithAggregatesInput[]
    OR?: ShoppingItemScalarWhereWithAggregatesInput[]
    NOT?: ShoppingItemScalarWhereWithAggregatesInput | ShoppingItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ShoppingItem"> | string
    listId?: StringWithAggregatesFilter<"ShoppingItem"> | string
    name?: StringWithAggregatesFilter<"ShoppingItem"> | string
    quantity?: DecimalWithAggregatesFilter<"ShoppingItem"> | Decimal | DecimalJsLike | number | string
    unit?: StringNullableWithAggregatesFilter<"ShoppingItem"> | string | null
    status?: EnumShoppingItemStatusWithAggregatesFilter<"ShoppingItem"> | $Enums.ShoppingItemStatus
    estimatedPrice?: DecimalNullableWithAggregatesFilter<"ShoppingItem"> | Decimal | DecimalJsLike | number | string | null
    priority?: IntNullableWithAggregatesFilter<"ShoppingItem"> | number | null
    category?: StringNullableWithAggregatesFilter<"ShoppingItem"> | string | null
    notes?: StringNullableWithAggregatesFilter<"ShoppingItem"> | string | null
    userId?: StringWithAggregatesFilter<"ShoppingItem"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ShoppingItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ShoppingItem"> | Date | string
  }

  export type ShoppingCategoryWhereInput = {
    AND?: ShoppingCategoryWhereInput | ShoppingCategoryWhereInput[]
    OR?: ShoppingCategoryWhereInput[]
    NOT?: ShoppingCategoryWhereInput | ShoppingCategoryWhereInput[]
    id?: StringFilter<"ShoppingCategory"> | string
    name?: StringFilter<"ShoppingCategory"> | string
    userId?: StringFilter<"ShoppingCategory"> | string
    familyId?: StringFilter<"ShoppingCategory"> | string
    color?: StringNullableFilter<"ShoppingCategory"> | string | null
    icon?: StringNullableFilter<"ShoppingCategory"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    family?: XOR<FamilyRelationFilter, FamilyWhereInput>
  }

  export type ShoppingCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    familyId?: SortOrder
    color?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    family?: FamilyOrderByWithRelationInput
  }

  export type ShoppingCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name_familyId?: ShoppingCategoryNameFamilyIdCompoundUniqueInput
    AND?: ShoppingCategoryWhereInput | ShoppingCategoryWhereInput[]
    OR?: ShoppingCategoryWhereInput[]
    NOT?: ShoppingCategoryWhereInput | ShoppingCategoryWhereInput[]
    name?: StringFilter<"ShoppingCategory"> | string
    userId?: StringFilter<"ShoppingCategory"> | string
    familyId?: StringFilter<"ShoppingCategory"> | string
    color?: StringNullableFilter<"ShoppingCategory"> | string | null
    icon?: StringNullableFilter<"ShoppingCategory"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    family?: XOR<FamilyRelationFilter, FamilyWhereInput>
  }, "id" | "name_familyId">

  export type ShoppingCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    familyId?: SortOrder
    color?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    _count?: ShoppingCategoryCountOrderByAggregateInput
    _max?: ShoppingCategoryMaxOrderByAggregateInput
    _min?: ShoppingCategoryMinOrderByAggregateInput
  }

  export type ShoppingCategoryScalarWhereWithAggregatesInput = {
    AND?: ShoppingCategoryScalarWhereWithAggregatesInput | ShoppingCategoryScalarWhereWithAggregatesInput[]
    OR?: ShoppingCategoryScalarWhereWithAggregatesInput[]
    NOT?: ShoppingCategoryScalarWhereWithAggregatesInput | ShoppingCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ShoppingCategory"> | string
    name?: StringWithAggregatesFilter<"ShoppingCategory"> | string
    userId?: StringWithAggregatesFilter<"ShoppingCategory"> | string
    familyId?: StringWithAggregatesFilter<"ShoppingCategory"> | string
    color?: StringNullableWithAggregatesFilter<"ShoppingCategory"> | string | null
    icon?: StringNullableWithAggregatesFilter<"ShoppingCategory"> | string | null
  }

  export type UserCreateInput = {
    id?: string
    familyId: string
    name: string
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
    shoppingItems?: ShoppingItemCreateNestedManyWithoutUserInput
    shoppingCategories?: ShoppingCategoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    familyId: string
    name: string
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
    shoppingItems?: ShoppingItemUncheckedCreateNestedManyWithoutUserInput
    shoppingCategories?: ShoppingCategoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    familyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
    shoppingItems?: ShoppingItemUpdateManyWithoutUserNestedInput
    shoppingCategories?: ShoppingCategoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    familyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
    shoppingItems?: ShoppingItemUncheckedUpdateManyWithoutUserNestedInput
    shoppingCategories?: ShoppingCategoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    familyId: string
    name: string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    familyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    familyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type FamilyCreateInput = {
    id?: string
    name: string
    shoppingLists?: ShoppingListCreateNestedManyWithoutFamilyInput
    shoppingCategories?: ShoppingCategoryCreateNestedManyWithoutFamilyInput
  }

  export type FamilyUncheckedCreateInput = {
    id?: string
    name: string
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutFamilyInput
    shoppingCategories?: ShoppingCategoryUncheckedCreateNestedManyWithoutFamilyInput
  }

  export type FamilyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shoppingLists?: ShoppingListUpdateManyWithoutFamilyNestedInput
    shoppingCategories?: ShoppingCategoryUpdateManyWithoutFamilyNestedInput
  }

  export type FamilyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutFamilyNestedInput
    shoppingCategories?: ShoppingCategoryUncheckedUpdateManyWithoutFamilyNestedInput
  }

  export type FamilyCreateManyInput = {
    id?: string
    name: string
  }

  export type FamilyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type FamilyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ShoppingListCreateInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.ShoppingListStatus
    totalEstimatedCost?: Decimal | DecimalJsLike | number | string | null
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutShoppingListsInput
    family: FamilyCreateNestedOneWithoutShoppingListsInput
    items?: ShoppingItemCreateNestedManyWithoutListInput
  }

  export type ShoppingListUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.ShoppingListStatus
    userId: string
    familyId: string
    totalEstimatedCost?: Decimal | DecimalJsLike | number | string | null
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ShoppingItemUncheckedCreateNestedManyWithoutListInput
  }

  export type ShoppingListUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShoppingListStatusFieldUpdateOperationsInput | $Enums.ShoppingListStatus
    totalEstimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutShoppingListsNestedInput
    family?: FamilyUpdateOneRequiredWithoutShoppingListsNestedInput
    items?: ShoppingItemUpdateManyWithoutListNestedInput
  }

  export type ShoppingListUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShoppingListStatusFieldUpdateOperationsInput | $Enums.ShoppingListStatus
    userId?: StringFieldUpdateOperationsInput | string
    familyId?: StringFieldUpdateOperationsInput | string
    totalEstimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ShoppingItemUncheckedUpdateManyWithoutListNestedInput
  }

  export type ShoppingListCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.ShoppingListStatus
    userId: string
    familyId: string
    totalEstimatedCost?: Decimal | DecimalJsLike | number | string | null
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShoppingListUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShoppingListStatusFieldUpdateOperationsInput | $Enums.ShoppingListStatus
    totalEstimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingListUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShoppingListStatusFieldUpdateOperationsInput | $Enums.ShoppingListStatus
    userId?: StringFieldUpdateOperationsInput | string
    familyId?: StringFieldUpdateOperationsInput | string
    totalEstimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingItemCreateInput = {
    id?: string
    name: string
    quantity: Decimal | DecimalJsLike | number | string
    unit?: string | null
    status?: $Enums.ShoppingItemStatus
    estimatedPrice?: Decimal | DecimalJsLike | number | string | null
    priority?: number | null
    category?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    list: ShoppingListCreateNestedOneWithoutItemsInput
    user: UserCreateNestedOneWithoutShoppingItemsInput
  }

  export type ShoppingItemUncheckedCreateInput = {
    id?: string
    listId: string
    name: string
    quantity: Decimal | DecimalJsLike | number | string
    unit?: string | null
    status?: $Enums.ShoppingItemStatus
    estimatedPrice?: Decimal | DecimalJsLike | number | string | null
    priority?: number | null
    category?: string | null
    notes?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShoppingItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShoppingItemStatusFieldUpdateOperationsInput | $Enums.ShoppingItemStatus
    estimatedPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    list?: ShoppingListUpdateOneRequiredWithoutItemsNestedInput
    user?: UserUpdateOneRequiredWithoutShoppingItemsNestedInput
  }

  export type ShoppingItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShoppingItemStatusFieldUpdateOperationsInput | $Enums.ShoppingItemStatus
    estimatedPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingItemCreateManyInput = {
    id?: string
    listId: string
    name: string
    quantity: Decimal | DecimalJsLike | number | string
    unit?: string | null
    status?: $Enums.ShoppingItemStatus
    estimatedPrice?: Decimal | DecimalJsLike | number | string | null
    priority?: number | null
    category?: string | null
    notes?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShoppingItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShoppingItemStatusFieldUpdateOperationsInput | $Enums.ShoppingItemStatus
    estimatedPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShoppingItemStatusFieldUpdateOperationsInput | $Enums.ShoppingItemStatus
    estimatedPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingCategoryCreateInput = {
    id?: string
    name: string
    color?: string | null
    icon?: string | null
    user: UserCreateNestedOneWithoutShoppingCategoriesInput
    family: FamilyCreateNestedOneWithoutShoppingCategoriesInput
  }

  export type ShoppingCategoryUncheckedCreateInput = {
    id?: string
    name: string
    userId: string
    familyId: string
    color?: string | null
    icon?: string | null
  }

  export type ShoppingCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutShoppingCategoriesNestedInput
    family?: FamilyUpdateOneRequiredWithoutShoppingCategoriesNestedInput
  }

  export type ShoppingCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    familyId?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShoppingCategoryCreateManyInput = {
    id?: string
    name: string
    userId: string
    familyId: string
    color?: string | null
    icon?: string | null
  }

  export type ShoppingCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShoppingCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    familyId?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ShoppingListListRelationFilter = {
    every?: ShoppingListWhereInput
    some?: ShoppingListWhereInput
    none?: ShoppingListWhereInput
  }

  export type ShoppingItemListRelationFilter = {
    every?: ShoppingItemWhereInput
    some?: ShoppingItemWhereInput
    none?: ShoppingItemWhereInput
  }

  export type ShoppingCategoryListRelationFilter = {
    every?: ShoppingCategoryWhereInput
    some?: ShoppingCategoryWhereInput
    none?: ShoppingCategoryWhereInput
  }

  export type ShoppingListOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShoppingItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShoppingCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    familyId?: SortOrder
    name?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    familyId?: SortOrder
    name?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    familyId?: SortOrder
    name?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FamilyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type FamilyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type FamilyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumShoppingListStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ShoppingListStatus | EnumShoppingListStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShoppingListStatus[] | ListEnumShoppingListStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShoppingListStatus[] | ListEnumShoppingListStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShoppingListStatusFilter<$PrismaModel> | $Enums.ShoppingListStatus
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FamilyRelationFilter = {
    is?: FamilyWhereInput
    isNot?: FamilyWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ShoppingListCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    familyId?: SortOrder
    totalEstimatedCost?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShoppingListAvgOrderByAggregateInput = {
    totalEstimatedCost?: SortOrder
  }

  export type ShoppingListMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    familyId?: SortOrder
    totalEstimatedCost?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShoppingListMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    familyId?: SortOrder
    totalEstimatedCost?: SortOrder
    dueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShoppingListSumOrderByAggregateInput = {
    totalEstimatedCost?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumShoppingListStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ShoppingListStatus | EnumShoppingListStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShoppingListStatus[] | ListEnumShoppingListStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShoppingListStatus[] | ListEnumShoppingListStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShoppingListStatusWithAggregatesFilter<$PrismaModel> | $Enums.ShoppingListStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumShoppingListStatusFilter<$PrismaModel>
    _max?: NestedEnumShoppingListStatusFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type EnumShoppingItemStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ShoppingItemStatus | EnumShoppingItemStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShoppingItemStatus[] | ListEnumShoppingItemStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShoppingItemStatus[] | ListEnumShoppingItemStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShoppingItemStatusFilter<$PrismaModel> | $Enums.ShoppingItemStatus
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ShoppingListRelationFilter = {
    is?: ShoppingListWhereInput
    isNot?: ShoppingListWhereInput
  }

  export type ShoppingItemCountOrderByAggregateInput = {
    id?: SortOrder
    listId?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    status?: SortOrder
    estimatedPrice?: SortOrder
    priority?: SortOrder
    category?: SortOrder
    notes?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShoppingItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
    estimatedPrice?: SortOrder
    priority?: SortOrder
  }

  export type ShoppingItemMaxOrderByAggregateInput = {
    id?: SortOrder
    listId?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    status?: SortOrder
    estimatedPrice?: SortOrder
    priority?: SortOrder
    category?: SortOrder
    notes?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShoppingItemMinOrderByAggregateInput = {
    id?: SortOrder
    listId?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    status?: SortOrder
    estimatedPrice?: SortOrder
    priority?: SortOrder
    category?: SortOrder
    notes?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShoppingItemSumOrderByAggregateInput = {
    quantity?: SortOrder
    estimatedPrice?: SortOrder
    priority?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumShoppingItemStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ShoppingItemStatus | EnumShoppingItemStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShoppingItemStatus[] | ListEnumShoppingItemStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShoppingItemStatus[] | ListEnumShoppingItemStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShoppingItemStatusWithAggregatesFilter<$PrismaModel> | $Enums.ShoppingItemStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumShoppingItemStatusFilter<$PrismaModel>
    _max?: NestedEnumShoppingItemStatusFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ShoppingCategoryNameFamilyIdCompoundUniqueInput = {
    name: string
    familyId: string
  }

  export type ShoppingCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    familyId?: SortOrder
    color?: SortOrder
    icon?: SortOrder
  }

  export type ShoppingCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    familyId?: SortOrder
    color?: SortOrder
    icon?: SortOrder
  }

  export type ShoppingCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    familyId?: SortOrder
    color?: SortOrder
    icon?: SortOrder
  }

  export type ShoppingListCreateNestedManyWithoutUserInput = {
    create?: XOR<ShoppingListCreateWithoutUserInput, ShoppingListUncheckedCreateWithoutUserInput> | ShoppingListCreateWithoutUserInput[] | ShoppingListUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingListCreateOrConnectWithoutUserInput | ShoppingListCreateOrConnectWithoutUserInput[]
    createMany?: ShoppingListCreateManyUserInputEnvelope
    connect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
  }

  export type ShoppingItemCreateNestedManyWithoutUserInput = {
    create?: XOR<ShoppingItemCreateWithoutUserInput, ShoppingItemUncheckedCreateWithoutUserInput> | ShoppingItemCreateWithoutUserInput[] | ShoppingItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutUserInput | ShoppingItemCreateOrConnectWithoutUserInput[]
    createMany?: ShoppingItemCreateManyUserInputEnvelope
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
  }

  export type ShoppingCategoryCreateNestedManyWithoutUserInput = {
    create?: XOR<ShoppingCategoryCreateWithoutUserInput, ShoppingCategoryUncheckedCreateWithoutUserInput> | ShoppingCategoryCreateWithoutUserInput[] | ShoppingCategoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingCategoryCreateOrConnectWithoutUserInput | ShoppingCategoryCreateOrConnectWithoutUserInput[]
    createMany?: ShoppingCategoryCreateManyUserInputEnvelope
    connect?: ShoppingCategoryWhereUniqueInput | ShoppingCategoryWhereUniqueInput[]
  }

  export type ShoppingListUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ShoppingListCreateWithoutUserInput, ShoppingListUncheckedCreateWithoutUserInput> | ShoppingListCreateWithoutUserInput[] | ShoppingListUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingListCreateOrConnectWithoutUserInput | ShoppingListCreateOrConnectWithoutUserInput[]
    createMany?: ShoppingListCreateManyUserInputEnvelope
    connect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
  }

  export type ShoppingItemUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ShoppingItemCreateWithoutUserInput, ShoppingItemUncheckedCreateWithoutUserInput> | ShoppingItemCreateWithoutUserInput[] | ShoppingItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutUserInput | ShoppingItemCreateOrConnectWithoutUserInput[]
    createMany?: ShoppingItemCreateManyUserInputEnvelope
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
  }

  export type ShoppingCategoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ShoppingCategoryCreateWithoutUserInput, ShoppingCategoryUncheckedCreateWithoutUserInput> | ShoppingCategoryCreateWithoutUserInput[] | ShoppingCategoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingCategoryCreateOrConnectWithoutUserInput | ShoppingCategoryCreateOrConnectWithoutUserInput[]
    createMany?: ShoppingCategoryCreateManyUserInputEnvelope
    connect?: ShoppingCategoryWhereUniqueInput | ShoppingCategoryWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ShoppingListUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShoppingListCreateWithoutUserInput, ShoppingListUncheckedCreateWithoutUserInput> | ShoppingListCreateWithoutUserInput[] | ShoppingListUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingListCreateOrConnectWithoutUserInput | ShoppingListCreateOrConnectWithoutUserInput[]
    upsert?: ShoppingListUpsertWithWhereUniqueWithoutUserInput | ShoppingListUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ShoppingListCreateManyUserInputEnvelope
    set?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    disconnect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    delete?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    connect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    update?: ShoppingListUpdateWithWhereUniqueWithoutUserInput | ShoppingListUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShoppingListUpdateManyWithWhereWithoutUserInput | ShoppingListUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShoppingListScalarWhereInput | ShoppingListScalarWhereInput[]
  }

  export type ShoppingItemUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShoppingItemCreateWithoutUserInput, ShoppingItemUncheckedCreateWithoutUserInput> | ShoppingItemCreateWithoutUserInput[] | ShoppingItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutUserInput | ShoppingItemCreateOrConnectWithoutUserInput[]
    upsert?: ShoppingItemUpsertWithWhereUniqueWithoutUserInput | ShoppingItemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ShoppingItemCreateManyUserInputEnvelope
    set?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    disconnect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    delete?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    update?: ShoppingItemUpdateWithWhereUniqueWithoutUserInput | ShoppingItemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShoppingItemUpdateManyWithWhereWithoutUserInput | ShoppingItemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShoppingItemScalarWhereInput | ShoppingItemScalarWhereInput[]
  }

  export type ShoppingCategoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShoppingCategoryCreateWithoutUserInput, ShoppingCategoryUncheckedCreateWithoutUserInput> | ShoppingCategoryCreateWithoutUserInput[] | ShoppingCategoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingCategoryCreateOrConnectWithoutUserInput | ShoppingCategoryCreateOrConnectWithoutUserInput[]
    upsert?: ShoppingCategoryUpsertWithWhereUniqueWithoutUserInput | ShoppingCategoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ShoppingCategoryCreateManyUserInputEnvelope
    set?: ShoppingCategoryWhereUniqueInput | ShoppingCategoryWhereUniqueInput[]
    disconnect?: ShoppingCategoryWhereUniqueInput | ShoppingCategoryWhereUniqueInput[]
    delete?: ShoppingCategoryWhereUniqueInput | ShoppingCategoryWhereUniqueInput[]
    connect?: ShoppingCategoryWhereUniqueInput | ShoppingCategoryWhereUniqueInput[]
    update?: ShoppingCategoryUpdateWithWhereUniqueWithoutUserInput | ShoppingCategoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShoppingCategoryUpdateManyWithWhereWithoutUserInput | ShoppingCategoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShoppingCategoryScalarWhereInput | ShoppingCategoryScalarWhereInput[]
  }

  export type ShoppingListUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShoppingListCreateWithoutUserInput, ShoppingListUncheckedCreateWithoutUserInput> | ShoppingListCreateWithoutUserInput[] | ShoppingListUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingListCreateOrConnectWithoutUserInput | ShoppingListCreateOrConnectWithoutUserInput[]
    upsert?: ShoppingListUpsertWithWhereUniqueWithoutUserInput | ShoppingListUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ShoppingListCreateManyUserInputEnvelope
    set?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    disconnect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    delete?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    connect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    update?: ShoppingListUpdateWithWhereUniqueWithoutUserInput | ShoppingListUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShoppingListUpdateManyWithWhereWithoutUserInput | ShoppingListUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShoppingListScalarWhereInput | ShoppingListScalarWhereInput[]
  }

  export type ShoppingItemUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShoppingItemCreateWithoutUserInput, ShoppingItemUncheckedCreateWithoutUserInput> | ShoppingItemCreateWithoutUserInput[] | ShoppingItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutUserInput | ShoppingItemCreateOrConnectWithoutUserInput[]
    upsert?: ShoppingItemUpsertWithWhereUniqueWithoutUserInput | ShoppingItemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ShoppingItemCreateManyUserInputEnvelope
    set?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    disconnect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    delete?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    update?: ShoppingItemUpdateWithWhereUniqueWithoutUserInput | ShoppingItemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShoppingItemUpdateManyWithWhereWithoutUserInput | ShoppingItemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShoppingItemScalarWhereInput | ShoppingItemScalarWhereInput[]
  }

  export type ShoppingCategoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShoppingCategoryCreateWithoutUserInput, ShoppingCategoryUncheckedCreateWithoutUserInput> | ShoppingCategoryCreateWithoutUserInput[] | ShoppingCategoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShoppingCategoryCreateOrConnectWithoutUserInput | ShoppingCategoryCreateOrConnectWithoutUserInput[]
    upsert?: ShoppingCategoryUpsertWithWhereUniqueWithoutUserInput | ShoppingCategoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ShoppingCategoryCreateManyUserInputEnvelope
    set?: ShoppingCategoryWhereUniqueInput | ShoppingCategoryWhereUniqueInput[]
    disconnect?: ShoppingCategoryWhereUniqueInput | ShoppingCategoryWhereUniqueInput[]
    delete?: ShoppingCategoryWhereUniqueInput | ShoppingCategoryWhereUniqueInput[]
    connect?: ShoppingCategoryWhereUniqueInput | ShoppingCategoryWhereUniqueInput[]
    update?: ShoppingCategoryUpdateWithWhereUniqueWithoutUserInput | ShoppingCategoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShoppingCategoryUpdateManyWithWhereWithoutUserInput | ShoppingCategoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShoppingCategoryScalarWhereInput | ShoppingCategoryScalarWhereInput[]
  }

  export type ShoppingListCreateNestedManyWithoutFamilyInput = {
    create?: XOR<ShoppingListCreateWithoutFamilyInput, ShoppingListUncheckedCreateWithoutFamilyInput> | ShoppingListCreateWithoutFamilyInput[] | ShoppingListUncheckedCreateWithoutFamilyInput[]
    connectOrCreate?: ShoppingListCreateOrConnectWithoutFamilyInput | ShoppingListCreateOrConnectWithoutFamilyInput[]
    createMany?: ShoppingListCreateManyFamilyInputEnvelope
    connect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
  }

  export type ShoppingCategoryCreateNestedManyWithoutFamilyInput = {
    create?: XOR<ShoppingCategoryCreateWithoutFamilyInput, ShoppingCategoryUncheckedCreateWithoutFamilyInput> | ShoppingCategoryCreateWithoutFamilyInput[] | ShoppingCategoryUncheckedCreateWithoutFamilyInput[]
    connectOrCreate?: ShoppingCategoryCreateOrConnectWithoutFamilyInput | ShoppingCategoryCreateOrConnectWithoutFamilyInput[]
    createMany?: ShoppingCategoryCreateManyFamilyInputEnvelope
    connect?: ShoppingCategoryWhereUniqueInput | ShoppingCategoryWhereUniqueInput[]
  }

  export type ShoppingListUncheckedCreateNestedManyWithoutFamilyInput = {
    create?: XOR<ShoppingListCreateWithoutFamilyInput, ShoppingListUncheckedCreateWithoutFamilyInput> | ShoppingListCreateWithoutFamilyInput[] | ShoppingListUncheckedCreateWithoutFamilyInput[]
    connectOrCreate?: ShoppingListCreateOrConnectWithoutFamilyInput | ShoppingListCreateOrConnectWithoutFamilyInput[]
    createMany?: ShoppingListCreateManyFamilyInputEnvelope
    connect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
  }

  export type ShoppingCategoryUncheckedCreateNestedManyWithoutFamilyInput = {
    create?: XOR<ShoppingCategoryCreateWithoutFamilyInput, ShoppingCategoryUncheckedCreateWithoutFamilyInput> | ShoppingCategoryCreateWithoutFamilyInput[] | ShoppingCategoryUncheckedCreateWithoutFamilyInput[]
    connectOrCreate?: ShoppingCategoryCreateOrConnectWithoutFamilyInput | ShoppingCategoryCreateOrConnectWithoutFamilyInput[]
    createMany?: ShoppingCategoryCreateManyFamilyInputEnvelope
    connect?: ShoppingCategoryWhereUniqueInput | ShoppingCategoryWhereUniqueInput[]
  }

  export type ShoppingListUpdateManyWithoutFamilyNestedInput = {
    create?: XOR<ShoppingListCreateWithoutFamilyInput, ShoppingListUncheckedCreateWithoutFamilyInput> | ShoppingListCreateWithoutFamilyInput[] | ShoppingListUncheckedCreateWithoutFamilyInput[]
    connectOrCreate?: ShoppingListCreateOrConnectWithoutFamilyInput | ShoppingListCreateOrConnectWithoutFamilyInput[]
    upsert?: ShoppingListUpsertWithWhereUniqueWithoutFamilyInput | ShoppingListUpsertWithWhereUniqueWithoutFamilyInput[]
    createMany?: ShoppingListCreateManyFamilyInputEnvelope
    set?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    disconnect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    delete?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    connect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    update?: ShoppingListUpdateWithWhereUniqueWithoutFamilyInput | ShoppingListUpdateWithWhereUniqueWithoutFamilyInput[]
    updateMany?: ShoppingListUpdateManyWithWhereWithoutFamilyInput | ShoppingListUpdateManyWithWhereWithoutFamilyInput[]
    deleteMany?: ShoppingListScalarWhereInput | ShoppingListScalarWhereInput[]
  }

  export type ShoppingCategoryUpdateManyWithoutFamilyNestedInput = {
    create?: XOR<ShoppingCategoryCreateWithoutFamilyInput, ShoppingCategoryUncheckedCreateWithoutFamilyInput> | ShoppingCategoryCreateWithoutFamilyInput[] | ShoppingCategoryUncheckedCreateWithoutFamilyInput[]
    connectOrCreate?: ShoppingCategoryCreateOrConnectWithoutFamilyInput | ShoppingCategoryCreateOrConnectWithoutFamilyInput[]
    upsert?: ShoppingCategoryUpsertWithWhereUniqueWithoutFamilyInput | ShoppingCategoryUpsertWithWhereUniqueWithoutFamilyInput[]
    createMany?: ShoppingCategoryCreateManyFamilyInputEnvelope
    set?: ShoppingCategoryWhereUniqueInput | ShoppingCategoryWhereUniqueInput[]
    disconnect?: ShoppingCategoryWhereUniqueInput | ShoppingCategoryWhereUniqueInput[]
    delete?: ShoppingCategoryWhereUniqueInput | ShoppingCategoryWhereUniqueInput[]
    connect?: ShoppingCategoryWhereUniqueInput | ShoppingCategoryWhereUniqueInput[]
    update?: ShoppingCategoryUpdateWithWhereUniqueWithoutFamilyInput | ShoppingCategoryUpdateWithWhereUniqueWithoutFamilyInput[]
    updateMany?: ShoppingCategoryUpdateManyWithWhereWithoutFamilyInput | ShoppingCategoryUpdateManyWithWhereWithoutFamilyInput[]
    deleteMany?: ShoppingCategoryScalarWhereInput | ShoppingCategoryScalarWhereInput[]
  }

  export type ShoppingListUncheckedUpdateManyWithoutFamilyNestedInput = {
    create?: XOR<ShoppingListCreateWithoutFamilyInput, ShoppingListUncheckedCreateWithoutFamilyInput> | ShoppingListCreateWithoutFamilyInput[] | ShoppingListUncheckedCreateWithoutFamilyInput[]
    connectOrCreate?: ShoppingListCreateOrConnectWithoutFamilyInput | ShoppingListCreateOrConnectWithoutFamilyInput[]
    upsert?: ShoppingListUpsertWithWhereUniqueWithoutFamilyInput | ShoppingListUpsertWithWhereUniqueWithoutFamilyInput[]
    createMany?: ShoppingListCreateManyFamilyInputEnvelope
    set?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    disconnect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    delete?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    connect?: ShoppingListWhereUniqueInput | ShoppingListWhereUniqueInput[]
    update?: ShoppingListUpdateWithWhereUniqueWithoutFamilyInput | ShoppingListUpdateWithWhereUniqueWithoutFamilyInput[]
    updateMany?: ShoppingListUpdateManyWithWhereWithoutFamilyInput | ShoppingListUpdateManyWithWhereWithoutFamilyInput[]
    deleteMany?: ShoppingListScalarWhereInput | ShoppingListScalarWhereInput[]
  }

  export type ShoppingCategoryUncheckedUpdateManyWithoutFamilyNestedInput = {
    create?: XOR<ShoppingCategoryCreateWithoutFamilyInput, ShoppingCategoryUncheckedCreateWithoutFamilyInput> | ShoppingCategoryCreateWithoutFamilyInput[] | ShoppingCategoryUncheckedCreateWithoutFamilyInput[]
    connectOrCreate?: ShoppingCategoryCreateOrConnectWithoutFamilyInput | ShoppingCategoryCreateOrConnectWithoutFamilyInput[]
    upsert?: ShoppingCategoryUpsertWithWhereUniqueWithoutFamilyInput | ShoppingCategoryUpsertWithWhereUniqueWithoutFamilyInput[]
    createMany?: ShoppingCategoryCreateManyFamilyInputEnvelope
    set?: ShoppingCategoryWhereUniqueInput | ShoppingCategoryWhereUniqueInput[]
    disconnect?: ShoppingCategoryWhereUniqueInput | ShoppingCategoryWhereUniqueInput[]
    delete?: ShoppingCategoryWhereUniqueInput | ShoppingCategoryWhereUniqueInput[]
    connect?: ShoppingCategoryWhereUniqueInput | ShoppingCategoryWhereUniqueInput[]
    update?: ShoppingCategoryUpdateWithWhereUniqueWithoutFamilyInput | ShoppingCategoryUpdateWithWhereUniqueWithoutFamilyInput[]
    updateMany?: ShoppingCategoryUpdateManyWithWhereWithoutFamilyInput | ShoppingCategoryUpdateManyWithWhereWithoutFamilyInput[]
    deleteMany?: ShoppingCategoryScalarWhereInput | ShoppingCategoryScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutShoppingListsInput = {
    create?: XOR<UserCreateWithoutShoppingListsInput, UserUncheckedCreateWithoutShoppingListsInput>
    connectOrCreate?: UserCreateOrConnectWithoutShoppingListsInput
    connect?: UserWhereUniqueInput
  }

  export type FamilyCreateNestedOneWithoutShoppingListsInput = {
    create?: XOR<FamilyCreateWithoutShoppingListsInput, FamilyUncheckedCreateWithoutShoppingListsInput>
    connectOrCreate?: FamilyCreateOrConnectWithoutShoppingListsInput
    connect?: FamilyWhereUniqueInput
  }

  export type ShoppingItemCreateNestedManyWithoutListInput = {
    create?: XOR<ShoppingItemCreateWithoutListInput, ShoppingItemUncheckedCreateWithoutListInput> | ShoppingItemCreateWithoutListInput[] | ShoppingItemUncheckedCreateWithoutListInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutListInput | ShoppingItemCreateOrConnectWithoutListInput[]
    createMany?: ShoppingItemCreateManyListInputEnvelope
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
  }

  export type ShoppingItemUncheckedCreateNestedManyWithoutListInput = {
    create?: XOR<ShoppingItemCreateWithoutListInput, ShoppingItemUncheckedCreateWithoutListInput> | ShoppingItemCreateWithoutListInput[] | ShoppingItemUncheckedCreateWithoutListInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutListInput | ShoppingItemCreateOrConnectWithoutListInput[]
    createMany?: ShoppingItemCreateManyListInputEnvelope
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumShoppingListStatusFieldUpdateOperationsInput = {
    set?: $Enums.ShoppingListStatus
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutShoppingListsNestedInput = {
    create?: XOR<UserCreateWithoutShoppingListsInput, UserUncheckedCreateWithoutShoppingListsInput>
    connectOrCreate?: UserCreateOrConnectWithoutShoppingListsInput
    upsert?: UserUpsertWithoutShoppingListsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutShoppingListsInput, UserUpdateWithoutShoppingListsInput>, UserUncheckedUpdateWithoutShoppingListsInput>
  }

  export type FamilyUpdateOneRequiredWithoutShoppingListsNestedInput = {
    create?: XOR<FamilyCreateWithoutShoppingListsInput, FamilyUncheckedCreateWithoutShoppingListsInput>
    connectOrCreate?: FamilyCreateOrConnectWithoutShoppingListsInput
    upsert?: FamilyUpsertWithoutShoppingListsInput
    connect?: FamilyWhereUniqueInput
    update?: XOR<XOR<FamilyUpdateToOneWithWhereWithoutShoppingListsInput, FamilyUpdateWithoutShoppingListsInput>, FamilyUncheckedUpdateWithoutShoppingListsInput>
  }

  export type ShoppingItemUpdateManyWithoutListNestedInput = {
    create?: XOR<ShoppingItemCreateWithoutListInput, ShoppingItemUncheckedCreateWithoutListInput> | ShoppingItemCreateWithoutListInput[] | ShoppingItemUncheckedCreateWithoutListInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutListInput | ShoppingItemCreateOrConnectWithoutListInput[]
    upsert?: ShoppingItemUpsertWithWhereUniqueWithoutListInput | ShoppingItemUpsertWithWhereUniqueWithoutListInput[]
    createMany?: ShoppingItemCreateManyListInputEnvelope
    set?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    disconnect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    delete?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    update?: ShoppingItemUpdateWithWhereUniqueWithoutListInput | ShoppingItemUpdateWithWhereUniqueWithoutListInput[]
    updateMany?: ShoppingItemUpdateManyWithWhereWithoutListInput | ShoppingItemUpdateManyWithWhereWithoutListInput[]
    deleteMany?: ShoppingItemScalarWhereInput | ShoppingItemScalarWhereInput[]
  }

  export type ShoppingItemUncheckedUpdateManyWithoutListNestedInput = {
    create?: XOR<ShoppingItemCreateWithoutListInput, ShoppingItemUncheckedCreateWithoutListInput> | ShoppingItemCreateWithoutListInput[] | ShoppingItemUncheckedCreateWithoutListInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutListInput | ShoppingItemCreateOrConnectWithoutListInput[]
    upsert?: ShoppingItemUpsertWithWhereUniqueWithoutListInput | ShoppingItemUpsertWithWhereUniqueWithoutListInput[]
    createMany?: ShoppingItemCreateManyListInputEnvelope
    set?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    disconnect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    delete?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    update?: ShoppingItemUpdateWithWhereUniqueWithoutListInput | ShoppingItemUpdateWithWhereUniqueWithoutListInput[]
    updateMany?: ShoppingItemUpdateManyWithWhereWithoutListInput | ShoppingItemUpdateManyWithWhereWithoutListInput[]
    deleteMany?: ShoppingItemScalarWhereInput | ShoppingItemScalarWhereInput[]
  }

  export type ShoppingListCreateNestedOneWithoutItemsInput = {
    create?: XOR<ShoppingListCreateWithoutItemsInput, ShoppingListUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ShoppingListCreateOrConnectWithoutItemsInput
    connect?: ShoppingListWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutShoppingItemsInput = {
    create?: XOR<UserCreateWithoutShoppingItemsInput, UserUncheckedCreateWithoutShoppingItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutShoppingItemsInput
    connect?: UserWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumShoppingItemStatusFieldUpdateOperationsInput = {
    set?: $Enums.ShoppingItemStatus
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ShoppingListUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<ShoppingListCreateWithoutItemsInput, ShoppingListUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ShoppingListCreateOrConnectWithoutItemsInput
    upsert?: ShoppingListUpsertWithoutItemsInput
    connect?: ShoppingListWhereUniqueInput
    update?: XOR<XOR<ShoppingListUpdateToOneWithWhereWithoutItemsInput, ShoppingListUpdateWithoutItemsInput>, ShoppingListUncheckedUpdateWithoutItemsInput>
  }

  export type UserUpdateOneRequiredWithoutShoppingItemsNestedInput = {
    create?: XOR<UserCreateWithoutShoppingItemsInput, UserUncheckedCreateWithoutShoppingItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutShoppingItemsInput
    upsert?: UserUpsertWithoutShoppingItemsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutShoppingItemsInput, UserUpdateWithoutShoppingItemsInput>, UserUncheckedUpdateWithoutShoppingItemsInput>
  }

  export type UserCreateNestedOneWithoutShoppingCategoriesInput = {
    create?: XOR<UserCreateWithoutShoppingCategoriesInput, UserUncheckedCreateWithoutShoppingCategoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutShoppingCategoriesInput
    connect?: UserWhereUniqueInput
  }

  export type FamilyCreateNestedOneWithoutShoppingCategoriesInput = {
    create?: XOR<FamilyCreateWithoutShoppingCategoriesInput, FamilyUncheckedCreateWithoutShoppingCategoriesInput>
    connectOrCreate?: FamilyCreateOrConnectWithoutShoppingCategoriesInput
    connect?: FamilyWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutShoppingCategoriesNestedInput = {
    create?: XOR<UserCreateWithoutShoppingCategoriesInput, UserUncheckedCreateWithoutShoppingCategoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutShoppingCategoriesInput
    upsert?: UserUpsertWithoutShoppingCategoriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutShoppingCategoriesInput, UserUpdateWithoutShoppingCategoriesInput>, UserUncheckedUpdateWithoutShoppingCategoriesInput>
  }

  export type FamilyUpdateOneRequiredWithoutShoppingCategoriesNestedInput = {
    create?: XOR<FamilyCreateWithoutShoppingCategoriesInput, FamilyUncheckedCreateWithoutShoppingCategoriesInput>
    connectOrCreate?: FamilyCreateOrConnectWithoutShoppingCategoriesInput
    upsert?: FamilyUpsertWithoutShoppingCategoriesInput
    connect?: FamilyWhereUniqueInput
    update?: XOR<XOR<FamilyUpdateToOneWithWhereWithoutShoppingCategoriesInput, FamilyUpdateWithoutShoppingCategoriesInput>, FamilyUncheckedUpdateWithoutShoppingCategoriesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumShoppingListStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ShoppingListStatus | EnumShoppingListStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShoppingListStatus[] | ListEnumShoppingListStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShoppingListStatus[] | ListEnumShoppingListStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShoppingListStatusFilter<$PrismaModel> | $Enums.ShoppingListStatus
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumShoppingListStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ShoppingListStatus | EnumShoppingListStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShoppingListStatus[] | ListEnumShoppingListStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShoppingListStatus[] | ListEnumShoppingListStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShoppingListStatusWithAggregatesFilter<$PrismaModel> | $Enums.ShoppingListStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumShoppingListStatusFilter<$PrismaModel>
    _max?: NestedEnumShoppingListStatusFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumShoppingItemStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ShoppingItemStatus | EnumShoppingItemStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShoppingItemStatus[] | ListEnumShoppingItemStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShoppingItemStatus[] | ListEnumShoppingItemStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShoppingItemStatusFilter<$PrismaModel> | $Enums.ShoppingItemStatus
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumShoppingItemStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ShoppingItemStatus | EnumShoppingItemStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ShoppingItemStatus[] | ListEnumShoppingItemStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ShoppingItemStatus[] | ListEnumShoppingItemStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumShoppingItemStatusWithAggregatesFilter<$PrismaModel> | $Enums.ShoppingItemStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumShoppingItemStatusFilter<$PrismaModel>
    _max?: NestedEnumShoppingItemStatusFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ShoppingListCreateWithoutUserInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.ShoppingListStatus
    totalEstimatedCost?: Decimal | DecimalJsLike | number | string | null
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    family: FamilyCreateNestedOneWithoutShoppingListsInput
    items?: ShoppingItemCreateNestedManyWithoutListInput
  }

  export type ShoppingListUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.ShoppingListStatus
    familyId: string
    totalEstimatedCost?: Decimal | DecimalJsLike | number | string | null
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ShoppingItemUncheckedCreateNestedManyWithoutListInput
  }

  export type ShoppingListCreateOrConnectWithoutUserInput = {
    where: ShoppingListWhereUniqueInput
    create: XOR<ShoppingListCreateWithoutUserInput, ShoppingListUncheckedCreateWithoutUserInput>
  }

  export type ShoppingListCreateManyUserInputEnvelope = {
    data: ShoppingListCreateManyUserInput | ShoppingListCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ShoppingItemCreateWithoutUserInput = {
    id?: string
    name: string
    quantity: Decimal | DecimalJsLike | number | string
    unit?: string | null
    status?: $Enums.ShoppingItemStatus
    estimatedPrice?: Decimal | DecimalJsLike | number | string | null
    priority?: number | null
    category?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    list: ShoppingListCreateNestedOneWithoutItemsInput
  }

  export type ShoppingItemUncheckedCreateWithoutUserInput = {
    id?: string
    listId: string
    name: string
    quantity: Decimal | DecimalJsLike | number | string
    unit?: string | null
    status?: $Enums.ShoppingItemStatus
    estimatedPrice?: Decimal | DecimalJsLike | number | string | null
    priority?: number | null
    category?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShoppingItemCreateOrConnectWithoutUserInput = {
    where: ShoppingItemWhereUniqueInput
    create: XOR<ShoppingItemCreateWithoutUserInput, ShoppingItemUncheckedCreateWithoutUserInput>
  }

  export type ShoppingItemCreateManyUserInputEnvelope = {
    data: ShoppingItemCreateManyUserInput | ShoppingItemCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ShoppingCategoryCreateWithoutUserInput = {
    id?: string
    name: string
    color?: string | null
    icon?: string | null
    family: FamilyCreateNestedOneWithoutShoppingCategoriesInput
  }

  export type ShoppingCategoryUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    familyId: string
    color?: string | null
    icon?: string | null
  }

  export type ShoppingCategoryCreateOrConnectWithoutUserInput = {
    where: ShoppingCategoryWhereUniqueInput
    create: XOR<ShoppingCategoryCreateWithoutUserInput, ShoppingCategoryUncheckedCreateWithoutUserInput>
  }

  export type ShoppingCategoryCreateManyUserInputEnvelope = {
    data: ShoppingCategoryCreateManyUserInput | ShoppingCategoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ShoppingListUpsertWithWhereUniqueWithoutUserInput = {
    where: ShoppingListWhereUniqueInput
    update: XOR<ShoppingListUpdateWithoutUserInput, ShoppingListUncheckedUpdateWithoutUserInput>
    create: XOR<ShoppingListCreateWithoutUserInput, ShoppingListUncheckedCreateWithoutUserInput>
  }

  export type ShoppingListUpdateWithWhereUniqueWithoutUserInput = {
    where: ShoppingListWhereUniqueInput
    data: XOR<ShoppingListUpdateWithoutUserInput, ShoppingListUncheckedUpdateWithoutUserInput>
  }

  export type ShoppingListUpdateManyWithWhereWithoutUserInput = {
    where: ShoppingListScalarWhereInput
    data: XOR<ShoppingListUpdateManyMutationInput, ShoppingListUncheckedUpdateManyWithoutUserInput>
  }

  export type ShoppingListScalarWhereInput = {
    AND?: ShoppingListScalarWhereInput | ShoppingListScalarWhereInput[]
    OR?: ShoppingListScalarWhereInput[]
    NOT?: ShoppingListScalarWhereInput | ShoppingListScalarWhereInput[]
    id?: StringFilter<"ShoppingList"> | string
    title?: StringFilter<"ShoppingList"> | string
    description?: StringNullableFilter<"ShoppingList"> | string | null
    status?: EnumShoppingListStatusFilter<"ShoppingList"> | $Enums.ShoppingListStatus
    userId?: StringFilter<"ShoppingList"> | string
    familyId?: StringFilter<"ShoppingList"> | string
    totalEstimatedCost?: DecimalNullableFilter<"ShoppingList"> | Decimal | DecimalJsLike | number | string | null
    dueDate?: DateTimeNullableFilter<"ShoppingList"> | Date | string | null
    createdAt?: DateTimeFilter<"ShoppingList"> | Date | string
    updatedAt?: DateTimeFilter<"ShoppingList"> | Date | string
  }

  export type ShoppingItemUpsertWithWhereUniqueWithoutUserInput = {
    where: ShoppingItemWhereUniqueInput
    update: XOR<ShoppingItemUpdateWithoutUserInput, ShoppingItemUncheckedUpdateWithoutUserInput>
    create: XOR<ShoppingItemCreateWithoutUserInput, ShoppingItemUncheckedCreateWithoutUserInput>
  }

  export type ShoppingItemUpdateWithWhereUniqueWithoutUserInput = {
    where: ShoppingItemWhereUniqueInput
    data: XOR<ShoppingItemUpdateWithoutUserInput, ShoppingItemUncheckedUpdateWithoutUserInput>
  }

  export type ShoppingItemUpdateManyWithWhereWithoutUserInput = {
    where: ShoppingItemScalarWhereInput
    data: XOR<ShoppingItemUpdateManyMutationInput, ShoppingItemUncheckedUpdateManyWithoutUserInput>
  }

  export type ShoppingItemScalarWhereInput = {
    AND?: ShoppingItemScalarWhereInput | ShoppingItemScalarWhereInput[]
    OR?: ShoppingItemScalarWhereInput[]
    NOT?: ShoppingItemScalarWhereInput | ShoppingItemScalarWhereInput[]
    id?: StringFilter<"ShoppingItem"> | string
    listId?: StringFilter<"ShoppingItem"> | string
    name?: StringFilter<"ShoppingItem"> | string
    quantity?: DecimalFilter<"ShoppingItem"> | Decimal | DecimalJsLike | number | string
    unit?: StringNullableFilter<"ShoppingItem"> | string | null
    status?: EnumShoppingItemStatusFilter<"ShoppingItem"> | $Enums.ShoppingItemStatus
    estimatedPrice?: DecimalNullableFilter<"ShoppingItem"> | Decimal | DecimalJsLike | number | string | null
    priority?: IntNullableFilter<"ShoppingItem"> | number | null
    category?: StringNullableFilter<"ShoppingItem"> | string | null
    notes?: StringNullableFilter<"ShoppingItem"> | string | null
    userId?: StringFilter<"ShoppingItem"> | string
    createdAt?: DateTimeFilter<"ShoppingItem"> | Date | string
    updatedAt?: DateTimeFilter<"ShoppingItem"> | Date | string
  }

  export type ShoppingCategoryUpsertWithWhereUniqueWithoutUserInput = {
    where: ShoppingCategoryWhereUniqueInput
    update: XOR<ShoppingCategoryUpdateWithoutUserInput, ShoppingCategoryUncheckedUpdateWithoutUserInput>
    create: XOR<ShoppingCategoryCreateWithoutUserInput, ShoppingCategoryUncheckedCreateWithoutUserInput>
  }

  export type ShoppingCategoryUpdateWithWhereUniqueWithoutUserInput = {
    where: ShoppingCategoryWhereUniqueInput
    data: XOR<ShoppingCategoryUpdateWithoutUserInput, ShoppingCategoryUncheckedUpdateWithoutUserInput>
  }

  export type ShoppingCategoryUpdateManyWithWhereWithoutUserInput = {
    where: ShoppingCategoryScalarWhereInput
    data: XOR<ShoppingCategoryUpdateManyMutationInput, ShoppingCategoryUncheckedUpdateManyWithoutUserInput>
  }

  export type ShoppingCategoryScalarWhereInput = {
    AND?: ShoppingCategoryScalarWhereInput | ShoppingCategoryScalarWhereInput[]
    OR?: ShoppingCategoryScalarWhereInput[]
    NOT?: ShoppingCategoryScalarWhereInput | ShoppingCategoryScalarWhereInput[]
    id?: StringFilter<"ShoppingCategory"> | string
    name?: StringFilter<"ShoppingCategory"> | string
    userId?: StringFilter<"ShoppingCategory"> | string
    familyId?: StringFilter<"ShoppingCategory"> | string
    color?: StringNullableFilter<"ShoppingCategory"> | string | null
    icon?: StringNullableFilter<"ShoppingCategory"> | string | null
  }

  export type ShoppingListCreateWithoutFamilyInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.ShoppingListStatus
    totalEstimatedCost?: Decimal | DecimalJsLike | number | string | null
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutShoppingListsInput
    items?: ShoppingItemCreateNestedManyWithoutListInput
  }

  export type ShoppingListUncheckedCreateWithoutFamilyInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.ShoppingListStatus
    userId: string
    totalEstimatedCost?: Decimal | DecimalJsLike | number | string | null
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ShoppingItemUncheckedCreateNestedManyWithoutListInput
  }

  export type ShoppingListCreateOrConnectWithoutFamilyInput = {
    where: ShoppingListWhereUniqueInput
    create: XOR<ShoppingListCreateWithoutFamilyInput, ShoppingListUncheckedCreateWithoutFamilyInput>
  }

  export type ShoppingListCreateManyFamilyInputEnvelope = {
    data: ShoppingListCreateManyFamilyInput | ShoppingListCreateManyFamilyInput[]
    skipDuplicates?: boolean
  }

  export type ShoppingCategoryCreateWithoutFamilyInput = {
    id?: string
    name: string
    color?: string | null
    icon?: string | null
    user: UserCreateNestedOneWithoutShoppingCategoriesInput
  }

  export type ShoppingCategoryUncheckedCreateWithoutFamilyInput = {
    id?: string
    name: string
    userId: string
    color?: string | null
    icon?: string | null
  }

  export type ShoppingCategoryCreateOrConnectWithoutFamilyInput = {
    where: ShoppingCategoryWhereUniqueInput
    create: XOR<ShoppingCategoryCreateWithoutFamilyInput, ShoppingCategoryUncheckedCreateWithoutFamilyInput>
  }

  export type ShoppingCategoryCreateManyFamilyInputEnvelope = {
    data: ShoppingCategoryCreateManyFamilyInput | ShoppingCategoryCreateManyFamilyInput[]
    skipDuplicates?: boolean
  }

  export type ShoppingListUpsertWithWhereUniqueWithoutFamilyInput = {
    where: ShoppingListWhereUniqueInput
    update: XOR<ShoppingListUpdateWithoutFamilyInput, ShoppingListUncheckedUpdateWithoutFamilyInput>
    create: XOR<ShoppingListCreateWithoutFamilyInput, ShoppingListUncheckedCreateWithoutFamilyInput>
  }

  export type ShoppingListUpdateWithWhereUniqueWithoutFamilyInput = {
    where: ShoppingListWhereUniqueInput
    data: XOR<ShoppingListUpdateWithoutFamilyInput, ShoppingListUncheckedUpdateWithoutFamilyInput>
  }

  export type ShoppingListUpdateManyWithWhereWithoutFamilyInput = {
    where: ShoppingListScalarWhereInput
    data: XOR<ShoppingListUpdateManyMutationInput, ShoppingListUncheckedUpdateManyWithoutFamilyInput>
  }

  export type ShoppingCategoryUpsertWithWhereUniqueWithoutFamilyInput = {
    where: ShoppingCategoryWhereUniqueInput
    update: XOR<ShoppingCategoryUpdateWithoutFamilyInput, ShoppingCategoryUncheckedUpdateWithoutFamilyInput>
    create: XOR<ShoppingCategoryCreateWithoutFamilyInput, ShoppingCategoryUncheckedCreateWithoutFamilyInput>
  }

  export type ShoppingCategoryUpdateWithWhereUniqueWithoutFamilyInput = {
    where: ShoppingCategoryWhereUniqueInput
    data: XOR<ShoppingCategoryUpdateWithoutFamilyInput, ShoppingCategoryUncheckedUpdateWithoutFamilyInput>
  }

  export type ShoppingCategoryUpdateManyWithWhereWithoutFamilyInput = {
    where: ShoppingCategoryScalarWhereInput
    data: XOR<ShoppingCategoryUpdateManyMutationInput, ShoppingCategoryUncheckedUpdateManyWithoutFamilyInput>
  }

  export type UserCreateWithoutShoppingListsInput = {
    id?: string
    familyId: string
    name: string
    shoppingItems?: ShoppingItemCreateNestedManyWithoutUserInput
    shoppingCategories?: ShoppingCategoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutShoppingListsInput = {
    id?: string
    familyId: string
    name: string
    shoppingItems?: ShoppingItemUncheckedCreateNestedManyWithoutUserInput
    shoppingCategories?: ShoppingCategoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutShoppingListsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutShoppingListsInput, UserUncheckedCreateWithoutShoppingListsInput>
  }

  export type FamilyCreateWithoutShoppingListsInput = {
    id?: string
    name: string
    shoppingCategories?: ShoppingCategoryCreateNestedManyWithoutFamilyInput
  }

  export type FamilyUncheckedCreateWithoutShoppingListsInput = {
    id?: string
    name: string
    shoppingCategories?: ShoppingCategoryUncheckedCreateNestedManyWithoutFamilyInput
  }

  export type FamilyCreateOrConnectWithoutShoppingListsInput = {
    where: FamilyWhereUniqueInput
    create: XOR<FamilyCreateWithoutShoppingListsInput, FamilyUncheckedCreateWithoutShoppingListsInput>
  }

  export type ShoppingItemCreateWithoutListInput = {
    id?: string
    name: string
    quantity: Decimal | DecimalJsLike | number | string
    unit?: string | null
    status?: $Enums.ShoppingItemStatus
    estimatedPrice?: Decimal | DecimalJsLike | number | string | null
    priority?: number | null
    category?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutShoppingItemsInput
  }

  export type ShoppingItemUncheckedCreateWithoutListInput = {
    id?: string
    name: string
    quantity: Decimal | DecimalJsLike | number | string
    unit?: string | null
    status?: $Enums.ShoppingItemStatus
    estimatedPrice?: Decimal | DecimalJsLike | number | string | null
    priority?: number | null
    category?: string | null
    notes?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShoppingItemCreateOrConnectWithoutListInput = {
    where: ShoppingItemWhereUniqueInput
    create: XOR<ShoppingItemCreateWithoutListInput, ShoppingItemUncheckedCreateWithoutListInput>
  }

  export type ShoppingItemCreateManyListInputEnvelope = {
    data: ShoppingItemCreateManyListInput | ShoppingItemCreateManyListInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutShoppingListsInput = {
    update: XOR<UserUpdateWithoutShoppingListsInput, UserUncheckedUpdateWithoutShoppingListsInput>
    create: XOR<UserCreateWithoutShoppingListsInput, UserUncheckedCreateWithoutShoppingListsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutShoppingListsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutShoppingListsInput, UserUncheckedUpdateWithoutShoppingListsInput>
  }

  export type UserUpdateWithoutShoppingListsInput = {
    id?: StringFieldUpdateOperationsInput | string
    familyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shoppingItems?: ShoppingItemUpdateManyWithoutUserNestedInput
    shoppingCategories?: ShoppingCategoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutShoppingListsInput = {
    id?: StringFieldUpdateOperationsInput | string
    familyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shoppingItems?: ShoppingItemUncheckedUpdateManyWithoutUserNestedInput
    shoppingCategories?: ShoppingCategoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FamilyUpsertWithoutShoppingListsInput = {
    update: XOR<FamilyUpdateWithoutShoppingListsInput, FamilyUncheckedUpdateWithoutShoppingListsInput>
    create: XOR<FamilyCreateWithoutShoppingListsInput, FamilyUncheckedCreateWithoutShoppingListsInput>
    where?: FamilyWhereInput
  }

  export type FamilyUpdateToOneWithWhereWithoutShoppingListsInput = {
    where?: FamilyWhereInput
    data: XOR<FamilyUpdateWithoutShoppingListsInput, FamilyUncheckedUpdateWithoutShoppingListsInput>
  }

  export type FamilyUpdateWithoutShoppingListsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shoppingCategories?: ShoppingCategoryUpdateManyWithoutFamilyNestedInput
  }

  export type FamilyUncheckedUpdateWithoutShoppingListsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shoppingCategories?: ShoppingCategoryUncheckedUpdateManyWithoutFamilyNestedInput
  }

  export type ShoppingItemUpsertWithWhereUniqueWithoutListInput = {
    where: ShoppingItemWhereUniqueInput
    update: XOR<ShoppingItemUpdateWithoutListInput, ShoppingItemUncheckedUpdateWithoutListInput>
    create: XOR<ShoppingItemCreateWithoutListInput, ShoppingItemUncheckedCreateWithoutListInput>
  }

  export type ShoppingItemUpdateWithWhereUniqueWithoutListInput = {
    where: ShoppingItemWhereUniqueInput
    data: XOR<ShoppingItemUpdateWithoutListInput, ShoppingItemUncheckedUpdateWithoutListInput>
  }

  export type ShoppingItemUpdateManyWithWhereWithoutListInput = {
    where: ShoppingItemScalarWhereInput
    data: XOR<ShoppingItemUpdateManyMutationInput, ShoppingItemUncheckedUpdateManyWithoutListInput>
  }

  export type ShoppingListCreateWithoutItemsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.ShoppingListStatus
    totalEstimatedCost?: Decimal | DecimalJsLike | number | string | null
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutShoppingListsInput
    family: FamilyCreateNestedOneWithoutShoppingListsInput
  }

  export type ShoppingListUncheckedCreateWithoutItemsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.ShoppingListStatus
    userId: string
    familyId: string
    totalEstimatedCost?: Decimal | DecimalJsLike | number | string | null
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShoppingListCreateOrConnectWithoutItemsInput = {
    where: ShoppingListWhereUniqueInput
    create: XOR<ShoppingListCreateWithoutItemsInput, ShoppingListUncheckedCreateWithoutItemsInput>
  }

  export type UserCreateWithoutShoppingItemsInput = {
    id?: string
    familyId: string
    name: string
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
    shoppingCategories?: ShoppingCategoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutShoppingItemsInput = {
    id?: string
    familyId: string
    name: string
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
    shoppingCategories?: ShoppingCategoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutShoppingItemsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutShoppingItemsInput, UserUncheckedCreateWithoutShoppingItemsInput>
  }

  export type ShoppingListUpsertWithoutItemsInput = {
    update: XOR<ShoppingListUpdateWithoutItemsInput, ShoppingListUncheckedUpdateWithoutItemsInput>
    create: XOR<ShoppingListCreateWithoutItemsInput, ShoppingListUncheckedCreateWithoutItemsInput>
    where?: ShoppingListWhereInput
  }

  export type ShoppingListUpdateToOneWithWhereWithoutItemsInput = {
    where?: ShoppingListWhereInput
    data: XOR<ShoppingListUpdateWithoutItemsInput, ShoppingListUncheckedUpdateWithoutItemsInput>
  }

  export type ShoppingListUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShoppingListStatusFieldUpdateOperationsInput | $Enums.ShoppingListStatus
    totalEstimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutShoppingListsNestedInput
    family?: FamilyUpdateOneRequiredWithoutShoppingListsNestedInput
  }

  export type ShoppingListUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShoppingListStatusFieldUpdateOperationsInput | $Enums.ShoppingListStatus
    userId?: StringFieldUpdateOperationsInput | string
    familyId?: StringFieldUpdateOperationsInput | string
    totalEstimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutShoppingItemsInput = {
    update: XOR<UserUpdateWithoutShoppingItemsInput, UserUncheckedUpdateWithoutShoppingItemsInput>
    create: XOR<UserCreateWithoutShoppingItemsInput, UserUncheckedCreateWithoutShoppingItemsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutShoppingItemsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutShoppingItemsInput, UserUncheckedUpdateWithoutShoppingItemsInput>
  }

  export type UserUpdateWithoutShoppingItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    familyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
    shoppingCategories?: ShoppingCategoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutShoppingItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    familyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
    shoppingCategories?: ShoppingCategoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutShoppingCategoriesInput = {
    id?: string
    familyId: string
    name: string
    shoppingLists?: ShoppingListCreateNestedManyWithoutUserInput
    shoppingItems?: ShoppingItemCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutShoppingCategoriesInput = {
    id?: string
    familyId: string
    name: string
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutUserInput
    shoppingItems?: ShoppingItemUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutShoppingCategoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutShoppingCategoriesInput, UserUncheckedCreateWithoutShoppingCategoriesInput>
  }

  export type FamilyCreateWithoutShoppingCategoriesInput = {
    id?: string
    name: string
    shoppingLists?: ShoppingListCreateNestedManyWithoutFamilyInput
  }

  export type FamilyUncheckedCreateWithoutShoppingCategoriesInput = {
    id?: string
    name: string
    shoppingLists?: ShoppingListUncheckedCreateNestedManyWithoutFamilyInput
  }

  export type FamilyCreateOrConnectWithoutShoppingCategoriesInput = {
    where: FamilyWhereUniqueInput
    create: XOR<FamilyCreateWithoutShoppingCategoriesInput, FamilyUncheckedCreateWithoutShoppingCategoriesInput>
  }

  export type UserUpsertWithoutShoppingCategoriesInput = {
    update: XOR<UserUpdateWithoutShoppingCategoriesInput, UserUncheckedUpdateWithoutShoppingCategoriesInput>
    create: XOR<UserCreateWithoutShoppingCategoriesInput, UserUncheckedCreateWithoutShoppingCategoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutShoppingCategoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutShoppingCategoriesInput, UserUncheckedUpdateWithoutShoppingCategoriesInput>
  }

  export type UserUpdateWithoutShoppingCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    familyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shoppingLists?: ShoppingListUpdateManyWithoutUserNestedInput
    shoppingItems?: ShoppingItemUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutShoppingCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    familyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutUserNestedInput
    shoppingItems?: ShoppingItemUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FamilyUpsertWithoutShoppingCategoriesInput = {
    update: XOR<FamilyUpdateWithoutShoppingCategoriesInput, FamilyUncheckedUpdateWithoutShoppingCategoriesInput>
    create: XOR<FamilyCreateWithoutShoppingCategoriesInput, FamilyUncheckedCreateWithoutShoppingCategoriesInput>
    where?: FamilyWhereInput
  }

  export type FamilyUpdateToOneWithWhereWithoutShoppingCategoriesInput = {
    where?: FamilyWhereInput
    data: XOR<FamilyUpdateWithoutShoppingCategoriesInput, FamilyUncheckedUpdateWithoutShoppingCategoriesInput>
  }

  export type FamilyUpdateWithoutShoppingCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shoppingLists?: ShoppingListUpdateManyWithoutFamilyNestedInput
  }

  export type FamilyUncheckedUpdateWithoutShoppingCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shoppingLists?: ShoppingListUncheckedUpdateManyWithoutFamilyNestedInput
  }

  export type ShoppingListCreateManyUserInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.ShoppingListStatus
    familyId: string
    totalEstimatedCost?: Decimal | DecimalJsLike | number | string | null
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShoppingItemCreateManyUserInput = {
    id?: string
    listId: string
    name: string
    quantity: Decimal | DecimalJsLike | number | string
    unit?: string | null
    status?: $Enums.ShoppingItemStatus
    estimatedPrice?: Decimal | DecimalJsLike | number | string | null
    priority?: number | null
    category?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShoppingCategoryCreateManyUserInput = {
    id?: string
    name: string
    familyId: string
    color?: string | null
    icon?: string | null
  }

  export type ShoppingListUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShoppingListStatusFieldUpdateOperationsInput | $Enums.ShoppingListStatus
    totalEstimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    family?: FamilyUpdateOneRequiredWithoutShoppingListsNestedInput
    items?: ShoppingItemUpdateManyWithoutListNestedInput
  }

  export type ShoppingListUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShoppingListStatusFieldUpdateOperationsInput | $Enums.ShoppingListStatus
    familyId?: StringFieldUpdateOperationsInput | string
    totalEstimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ShoppingItemUncheckedUpdateManyWithoutListNestedInput
  }

  export type ShoppingListUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShoppingListStatusFieldUpdateOperationsInput | $Enums.ShoppingListStatus
    familyId?: StringFieldUpdateOperationsInput | string
    totalEstimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingItemUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShoppingItemStatusFieldUpdateOperationsInput | $Enums.ShoppingItemStatus
    estimatedPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    list?: ShoppingListUpdateOneRequiredWithoutItemsNestedInput
  }

  export type ShoppingItemUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShoppingItemStatusFieldUpdateOperationsInput | $Enums.ShoppingItemStatus
    estimatedPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingItemUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShoppingItemStatusFieldUpdateOperationsInput | $Enums.ShoppingItemStatus
    estimatedPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingCategoryUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    family?: FamilyUpdateOneRequiredWithoutShoppingCategoriesNestedInput
  }

  export type ShoppingCategoryUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    familyId?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShoppingCategoryUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    familyId?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShoppingListCreateManyFamilyInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.ShoppingListStatus
    userId: string
    totalEstimatedCost?: Decimal | DecimalJsLike | number | string | null
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShoppingCategoryCreateManyFamilyInput = {
    id?: string
    name: string
    userId: string
    color?: string | null
    icon?: string | null
  }

  export type ShoppingListUpdateWithoutFamilyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShoppingListStatusFieldUpdateOperationsInput | $Enums.ShoppingListStatus
    totalEstimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutShoppingListsNestedInput
    items?: ShoppingItemUpdateManyWithoutListNestedInput
  }

  export type ShoppingListUncheckedUpdateWithoutFamilyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShoppingListStatusFieldUpdateOperationsInput | $Enums.ShoppingListStatus
    userId?: StringFieldUpdateOperationsInput | string
    totalEstimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ShoppingItemUncheckedUpdateManyWithoutListNestedInput
  }

  export type ShoppingListUncheckedUpdateManyWithoutFamilyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShoppingListStatusFieldUpdateOperationsInput | $Enums.ShoppingListStatus
    userId?: StringFieldUpdateOperationsInput | string
    totalEstimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingCategoryUpdateWithoutFamilyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutShoppingCategoriesNestedInput
  }

  export type ShoppingCategoryUncheckedUpdateWithoutFamilyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShoppingCategoryUncheckedUpdateManyWithoutFamilyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShoppingItemCreateManyListInput = {
    id?: string
    name: string
    quantity: Decimal | DecimalJsLike | number | string
    unit?: string | null
    status?: $Enums.ShoppingItemStatus
    estimatedPrice?: Decimal | DecimalJsLike | number | string | null
    priority?: number | null
    category?: string | null
    notes?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShoppingItemUpdateWithoutListInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShoppingItemStatusFieldUpdateOperationsInput | $Enums.ShoppingItemStatus
    estimatedPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutShoppingItemsNestedInput
  }

  export type ShoppingItemUncheckedUpdateWithoutListInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShoppingItemStatusFieldUpdateOperationsInput | $Enums.ShoppingItemStatus
    estimatedPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingItemUncheckedUpdateManyWithoutListInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumShoppingItemStatusFieldUpdateOperationsInput | $Enums.ShoppingItemStatus
    estimatedPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FamilyCountOutputTypeDefaultArgs instead
     */
    export type FamilyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FamilyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShoppingListCountOutputTypeDefaultArgs instead
     */
    export type ShoppingListCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShoppingListCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FamilyDefaultArgs instead
     */
    export type FamilyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FamilyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShoppingListDefaultArgs instead
     */
    export type ShoppingListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShoppingListDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShoppingItemDefaultArgs instead
     */
    export type ShoppingItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShoppingItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShoppingCategoryDefaultArgs instead
     */
    export type ShoppingCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShoppingCategoryDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}